
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef8  08002ef8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002ef8  08002ef8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ef8  08002ef8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000094  08002f94  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08002f94  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e39  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e47  00000000  00000000  00029ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172c8  00000000  00000000  0002d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cde3  00000000  00000000  00044400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082532  00000000  00000000  000511e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3715  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000291c  00000000  00000000  000d3768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ebc 	.word	0x08002ebc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08002ebc 	.word	0x08002ebc

0800014c <SCH_Init>:

#include "Scheduler.h"

static sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < SCH_MAX_TASKS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e033      	b.n	80001c0 <SCH_Init+0x74>
		SCH_tasks_G[i].pTask = 0x0000000;
 8000158:	491e      	ldr	r1, [pc, #120]	; (80001d4 <SCH_Init+0x88>)
 800015a:	687a      	ldr	r2, [r7, #4]
 800015c:	4613      	mov	r3, r2
 800015e:	009b      	lsls	r3, r3, #2
 8000160:	4413      	add	r3, r2
 8000162:	009b      	lsls	r3, r3, #2
 8000164:	440b      	add	r3, r1
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Delay = 0;
 800016a:	491a      	ldr	r1, [pc, #104]	; (80001d4 <SCH_Init+0x88>)
 800016c:	687a      	ldr	r2, [r7, #4]
 800016e:	4613      	mov	r3, r2
 8000170:	009b      	lsls	r3, r3, #2
 8000172:	4413      	add	r3, r2
 8000174:	009b      	lsls	r3, r3, #2
 8000176:	440b      	add	r3, r1
 8000178:	3304      	adds	r3, #4
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Period = 0;
 800017e:	4915      	ldr	r1, [pc, #84]	; (80001d4 <SCH_Init+0x88>)
 8000180:	687a      	ldr	r2, [r7, #4]
 8000182:	4613      	mov	r3, r2
 8000184:	009b      	lsls	r3, r3, #2
 8000186:	4413      	add	r3, r2
 8000188:	009b      	lsls	r3, r3, #2
 800018a:	440b      	add	r3, r1
 800018c:	3308      	adds	r3, #8
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].RunMe = 0;
 8000192:	4910      	ldr	r1, [pc, #64]	; (80001d4 <SCH_Init+0x88>)
 8000194:	687a      	ldr	r2, [r7, #4]
 8000196:	4613      	mov	r3, r2
 8000198:	009b      	lsls	r3, r3, #2
 800019a:	4413      	add	r3, r2
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	440b      	add	r3, r1
 80001a0:	330c      	adds	r3, #12
 80001a2:	2200      	movs	r2, #0
 80001a4:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[i].TaskID = 0;
 80001a6:	490b      	ldr	r1, [pc, #44]	; (80001d4 <SCH_Init+0x88>)
 80001a8:	687a      	ldr	r2, [r7, #4]
 80001aa:	4613      	mov	r3, r2
 80001ac:	009b      	lsls	r3, r3, #2
 80001ae:	4413      	add	r3, r2
 80001b0:	009b      	lsls	r3, r3, #2
 80001b2:	440b      	add	r3, r1
 80001b4:	3310      	adds	r3, #16
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < SCH_MAX_TASKS; i++){
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	3301      	adds	r3, #1
 80001be:	607b      	str	r3, [r7, #4]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b27      	cmp	r3, #39	; 0x27
 80001c4:	ddc8      	ble.n	8000158 <SCH_Init+0xc>
	}
}
 80001c6:	bf00      	nop
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	200000b0 	.word	0x200000b0

080001d8 <SCH_Update>:

void SCH_Update(void){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	 for(int i = 0; i < SCH_MAX_TASKS; i++){
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e048      	b.n	8000276 <SCH_Update+0x9e>
		 if(SCH_tasks_G[i].Delay > 0){
 80001e4:	4928      	ldr	r1, [pc, #160]	; (8000288 <SCH_Update+0xb0>)
 80001e6:	687a      	ldr	r2, [r7, #4]
 80001e8:	4613      	mov	r3, r2
 80001ea:	009b      	lsls	r3, r3, #2
 80001ec:	4413      	add	r3, r2
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	440b      	add	r3, r1
 80001f2:	3304      	adds	r3, #4
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d013      	beq.n	8000222 <SCH_Update+0x4a>
			 SCH_tasks_G[i].Delay --;
 80001fa:	4923      	ldr	r1, [pc, #140]	; (8000288 <SCH_Update+0xb0>)
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	4613      	mov	r3, r2
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	4413      	add	r3, r2
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	440b      	add	r3, r1
 8000208:	3304      	adds	r3, #4
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	1e59      	subs	r1, r3, #1
 800020e:	481e      	ldr	r0, [pc, #120]	; (8000288 <SCH_Update+0xb0>)
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	4613      	mov	r3, r2
 8000214:	009b      	lsls	r3, r3, #2
 8000216:	4413      	add	r3, r2
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	4403      	add	r3, r0
 800021c:	3304      	adds	r3, #4
 800021e:	6019      	str	r1, [r3, #0]
 8000220:	e026      	b.n	8000270 <SCH_Update+0x98>
		 }else{

				 SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8000222:	4919      	ldr	r1, [pc, #100]	; (8000288 <SCH_Update+0xb0>)
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	4613      	mov	r3, r2
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	4413      	add	r3, r2
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	440b      	add	r3, r1
 8000230:	3308      	adds	r3, #8
 8000232:	6819      	ldr	r1, [r3, #0]
 8000234:	4814      	ldr	r0, [pc, #80]	; (8000288 <SCH_Update+0xb0>)
 8000236:	687a      	ldr	r2, [r7, #4]
 8000238:	4613      	mov	r3, r2
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	4413      	add	r3, r2
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	4403      	add	r3, r0
 8000242:	3304      	adds	r3, #4
 8000244:	6019      	str	r1, [r3, #0]
				 SCH_tasks_G[i].RunMe += 1;
 8000246:	4910      	ldr	r1, [pc, #64]	; (8000288 <SCH_Update+0xb0>)
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	4613      	mov	r3, r2
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	4413      	add	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	440b      	add	r3, r1
 8000254:	330c      	adds	r3, #12
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	b2d8      	uxtb	r0, r3
 800025c:	490a      	ldr	r1, [pc, #40]	; (8000288 <SCH_Update+0xb0>)
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	4613      	mov	r3, r2
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	4413      	add	r3, r2
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	440b      	add	r3, r1
 800026a:	330c      	adds	r3, #12
 800026c:	4602      	mov	r2, r0
 800026e:	701a      	strb	r2, [r3, #0]
	 for(int i = 0; i < SCH_MAX_TASKS; i++){
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3301      	adds	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2b27      	cmp	r3, #39	; 0x27
 800027a:	ddb3      	ble.n	80001e4 <SCH_Update+0xc>
		 }
	 }
}
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	200000b0 	.word	0x200000b0

0800028c <SCH_Add_Task>:

void SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 800028c:	b480      	push	{r7}
 800028e:	b087      	sub	sp, #28
 8000290:	af00      	add	r7, sp, #0
 8000292:	60f8      	str	r0, [r7, #12]
 8000294:	60b9      	str	r1, [r7, #8]
 8000296:	607a      	str	r2, [r7, #4]
	uint8_t Index = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 800029c:	e002      	b.n	80002a4 <SCH_Add_Task+0x18>
		Index++;
 800029e:	7dfb      	ldrb	r3, [r7, #23]
 80002a0:	3301      	adds	r3, #1
 80002a2:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 80002a4:	7dfa      	ldrb	r2, [r7, #23]
 80002a6:	4923      	ldr	r1, [pc, #140]	; (8000334 <SCH_Add_Task+0xa8>)
 80002a8:	4613      	mov	r3, r2
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	4413      	add	r3, r2
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	440b      	add	r3, r1
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d002      	beq.n	80002be <SCH_Add_Task+0x32>
 80002b8:	7dfb      	ldrb	r3, [r7, #23]
 80002ba:	2b27      	cmp	r3, #39	; 0x27
 80002bc:	d9ef      	bls.n	800029e <SCH_Add_Task+0x12>
	}
	SCH_tasks_G[Index].pTask = pFunction;
 80002be:	7dfa      	ldrb	r2, [r7, #23]
 80002c0:	491c      	ldr	r1, [pc, #112]	; (8000334 <SCH_Add_Task+0xa8>)
 80002c2:	4613      	mov	r3, r2
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	4413      	add	r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	440b      	add	r3, r1
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 80002d0:	7dfa      	ldrb	r2, [r7, #23]
 80002d2:	4918      	ldr	r1, [pc, #96]	; (8000334 <SCH_Add_Task+0xa8>)
 80002d4:	4613      	mov	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	440b      	add	r3, r1
 80002de:	3304      	adds	r3, #4
 80002e0:	68ba      	ldr	r2, [r7, #8]
 80002e2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD/TICK;
 80002e4:	7dfa      	ldrb	r2, [r7, #23]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4913      	ldr	r1, [pc, #76]	; (8000338 <SCH_Add_Task+0xac>)
 80002ea:	fba1 1303 	umull	r1, r3, r1, r3
 80002ee:	08d9      	lsrs	r1, r3, #3
 80002f0:	4810      	ldr	r0, [pc, #64]	; (8000334 <SCH_Add_Task+0xa8>)
 80002f2:	4613      	mov	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4413      	add	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	4403      	add	r3, r0
 80002fc:	3308      	adds	r3, #8
 80002fe:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 8000300:	7dfa      	ldrb	r2, [r7, #23]
 8000302:	490c      	ldr	r1, [pc, #48]	; (8000334 <SCH_Add_Task+0xa8>)
 8000304:	4613      	mov	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4413      	add	r3, r2
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	440b      	add	r3, r1
 800030e:	330c      	adds	r3, #12
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[Index].TaskID = Index;
 8000314:	7dfa      	ldrb	r2, [r7, #23]
 8000316:	7df9      	ldrb	r1, [r7, #23]
 8000318:	4806      	ldr	r0, [pc, #24]	; (8000334 <SCH_Add_Task+0xa8>)
 800031a:	4613      	mov	r3, r2
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	4413      	add	r3, r2
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	4403      	add	r3, r0
 8000324:	3310      	adds	r3, #16
 8000326:	6019      	str	r1, [r3, #0]

}
 8000328:	bf00      	nop
 800032a:	371c      	adds	r7, #28
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	200000b0 	.word	0x200000b0
 8000338:	cccccccd 	.word	0xcccccccd

0800033c <SCH_Delete_Task>:


void SCH_Delete_Task(uint32_t taskID){
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
		SCH_tasks_G[taskID].pTask = 0;
 8000344:	494e      	ldr	r1, [pc, #312]	; (8000480 <SCH_Delete_Task+0x144>)
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	4613      	mov	r3, r2
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	4413      	add	r3, r2
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	440b      	add	r3, r1
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskID].Period = 0;
 8000356:	494a      	ldr	r1, [pc, #296]	; (8000480 <SCH_Delete_Task+0x144>)
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	4613      	mov	r3, r2
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4413      	add	r3, r2
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	440b      	add	r3, r1
 8000364:	3308      	adds	r3, #8
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskID].Delay = 0;
 800036a:	4945      	ldr	r1, [pc, #276]	; (8000480 <SCH_Delete_Task+0x144>)
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	4613      	mov	r3, r2
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	4413      	add	r3, r2
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	3304      	adds	r3, #4
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskID].RunMe = 0;
 800037e:	4940      	ldr	r1, [pc, #256]	; (8000480 <SCH_Delete_Task+0x144>)
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	4613      	mov	r3, r2
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	4413      	add	r3, r2
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	440b      	add	r3, r1
 800038c:	330c      	adds	r3, #12
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[taskID].TaskID = 0;
 8000392:	493b      	ldr	r1, [pc, #236]	; (8000480 <SCH_Delete_Task+0x144>)
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	4613      	mov	r3, r2
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	440b      	add	r3, r1
 80003a0:	3310      	adds	r3, #16
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
		uint8_t j;
		for( j = taskID; j < SCH_MAX_TASKS - 1; j ++){
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	73fb      	strb	r3, [r7, #15]
 80003aa:	e060      	b.n	800046e <SCH_Delete_Task+0x132>
			SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	1c59      	adds	r1, r3, #1
 80003b0:	7bfa      	ldrb	r2, [r7, #15]
 80003b2:	4833      	ldr	r0, [pc, #204]	; (8000480 <SCH_Delete_Task+0x144>)
 80003b4:	460b      	mov	r3, r1
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	440b      	add	r3, r1
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4403      	add	r3, r0
 80003be:	6819      	ldr	r1, [r3, #0]
 80003c0:	482f      	ldr	r0, [pc, #188]	; (8000480 <SCH_Delete_Task+0x144>)
 80003c2:	4613      	mov	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	4403      	add	r3, r0
 80003cc:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
 80003d0:	1c59      	adds	r1, r3, #1
 80003d2:	7bfa      	ldrb	r2, [r7, #15]
 80003d4:	482a      	ldr	r0, [pc, #168]	; (8000480 <SCH_Delete_Task+0x144>)
 80003d6:	460b      	mov	r3, r1
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	440b      	add	r3, r1
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	4403      	add	r3, r0
 80003e0:	3308      	adds	r3, #8
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	4826      	ldr	r0, [pc, #152]	; (8000480 <SCH_Delete_Task+0x144>)
 80003e6:	4613      	mov	r3, r2
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	4413      	add	r3, r2
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	4403      	add	r3, r0
 80003f0:	3308      	adds	r3, #8
 80003f2:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 80003f4:	7bfb      	ldrb	r3, [r7, #15]
 80003f6:	1c59      	adds	r1, r3, #1
 80003f8:	7bfa      	ldrb	r2, [r7, #15]
 80003fa:	4821      	ldr	r0, [pc, #132]	; (8000480 <SCH_Delete_Task+0x144>)
 80003fc:	460b      	mov	r3, r1
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	440b      	add	r3, r1
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4403      	add	r3, r0
 8000406:	3304      	adds	r3, #4
 8000408:	6819      	ldr	r1, [r3, #0]
 800040a:	481d      	ldr	r0, [pc, #116]	; (8000480 <SCH_Delete_Task+0x144>)
 800040c:	4613      	mov	r3, r2
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	4413      	add	r3, r2
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	4403      	add	r3, r0
 8000416:	3304      	adds	r3, #4
 8000418:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 800041a:	7bfb      	ldrb	r3, [r7, #15]
 800041c:	1c59      	adds	r1, r3, #1
 800041e:	7bfa      	ldrb	r2, [r7, #15]
 8000420:	4817      	ldr	r0, [pc, #92]	; (8000480 <SCH_Delete_Task+0x144>)
 8000422:	460b      	mov	r3, r1
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	440b      	add	r3, r1
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4403      	add	r3, r0
 800042c:	330c      	adds	r3, #12
 800042e:	7818      	ldrb	r0, [r3, #0]
 8000430:	4913      	ldr	r1, [pc, #76]	; (8000480 <SCH_Delete_Task+0x144>)
 8000432:	4613      	mov	r3, r2
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	4413      	add	r3, r2
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	440b      	add	r3, r1
 800043c:	330c      	adds	r3, #12
 800043e:	4602      	mov	r2, r0
 8000440:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	1c59      	adds	r1, r3, #1
 8000446:	7bfa      	ldrb	r2, [r7, #15]
 8000448:	480d      	ldr	r0, [pc, #52]	; (8000480 <SCH_Delete_Task+0x144>)
 800044a:	460b      	mov	r3, r1
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	440b      	add	r3, r1
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4403      	add	r3, r0
 8000454:	3310      	adds	r3, #16
 8000456:	6819      	ldr	r1, [r3, #0]
 8000458:	4809      	ldr	r0, [pc, #36]	; (8000480 <SCH_Delete_Task+0x144>)
 800045a:	4613      	mov	r3, r2
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	4413      	add	r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	4403      	add	r3, r0
 8000464:	3310      	adds	r3, #16
 8000466:	6019      	str	r1, [r3, #0]
		for( j = taskID; j < SCH_MAX_TASKS - 1; j ++){
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	3301      	adds	r3, #1
 800046c:	73fb      	strb	r3, [r7, #15]
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	2b26      	cmp	r3, #38	; 0x26
 8000472:	d99b      	bls.n	80003ac <SCH_Delete_Task+0x70>
		}

}
 8000474:	bf00      	nop
 8000476:	bf00      	nop
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	200000b0 	.word	0x200000b0

08000484 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
	 for(int i = 0; i < SCH_MAX_TASKS; i++){
 800048a:	2300      	movs	r3, #0
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	e044      	b.n	800051a <SCH_Dispatch_Tasks+0x96>
		 if(SCH_tasks_G[i].RunMe > 0){
 8000490:	4926      	ldr	r1, [pc, #152]	; (800052c <SCH_Dispatch_Tasks+0xa8>)
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	4613      	mov	r3, r2
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4413      	add	r3, r2
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	440b      	add	r3, r1
 800049e:	330c      	adds	r3, #12
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d036      	beq.n	8000514 <SCH_Dispatch_Tasks+0x90>
			 SCH_tasks_G[i].RunMe --;
 80004a6:	4921      	ldr	r1, [pc, #132]	; (800052c <SCH_Dispatch_Tasks+0xa8>)
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	4613      	mov	r3, r2
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	4413      	add	r3, r2
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	440b      	add	r3, r1
 80004b4:	330c      	adds	r3, #12
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	3b01      	subs	r3, #1
 80004ba:	b2d8      	uxtb	r0, r3
 80004bc:	491b      	ldr	r1, [pc, #108]	; (800052c <SCH_Dispatch_Tasks+0xa8>)
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	4613      	mov	r3, r2
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	4413      	add	r3, r2
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	440b      	add	r3, r1
 80004ca:	330c      	adds	r3, #12
 80004cc:	4602      	mov	r2, r0
 80004ce:	701a      	strb	r2, [r3, #0]
			 if(SCH_tasks_G[i].pTask){
 80004d0:	4916      	ldr	r1, [pc, #88]	; (800052c <SCH_Dispatch_Tasks+0xa8>)
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	4613      	mov	r3, r2
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	440b      	add	r3, r1
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d008      	beq.n	80004f6 <SCH_Dispatch_Tasks+0x72>
				 (*SCH_tasks_G[i].pTask)();
 80004e4:	4911      	ldr	r1, [pc, #68]	; (800052c <SCH_Dispatch_Tasks+0xa8>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	4613      	mov	r3, r2
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4413      	add	r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	440b      	add	r3, r1
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4798      	blx	r3
			 }
			 if(SCH_tasks_G[i].Period == 0){
 80004f6:	490d      	ldr	r1, [pc, #52]	; (800052c <SCH_Dispatch_Tasks+0xa8>)
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	4613      	mov	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	440b      	add	r3, r1
 8000504:	3308      	adds	r3, #8
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d103      	bne.n	8000514 <SCH_Dispatch_Tasks+0x90>
				 SCH_Delete_Task(i);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff14 	bl	800033c <SCH_Delete_Task>
	 for(int i = 0; i < SCH_MAX_TASKS; i++){
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3301      	adds	r3, #1
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b27      	cmp	r3, #39	; 0x27
 800051e:	ddb7      	ble.n	8000490 <SCH_Dispatch_Tasks+0xc>
			 }

		 }
	 }
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200000b0 	.word	0x200000b0

08000530 <isButtonPressed>:
int button_ports[4] = {0, BUTTON_0_GPIO_Port, BUTTON_1_GPIO_Port, BUTTON_2_GPIO_Port};
int button_pins[4] = {0, BUTTON_0_Pin, BUTTON_1_Pin, BUTTON_2_Pin};

int counterForButtonPress1s[4] = {0};

int isButtonPressed(int key){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if(button_flag[key] == 1){
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <isButtonPressed+0x30>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d106      	bne.n	8000552 <isButtonPressed+0x22>
		button_flag[key] = 0;
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <isButtonPressed+0x30>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2100      	movs	r1, #0
 800054a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800054e:	2301      	movs	r3, #1
 8000550:	e000      	b.n	8000554 <isButtonPressed+0x24>
	}
	return 0;
 8000552:	2300      	movs	r3, #0
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	200003d0 	.word	0x200003d0

08000564 <subKeyProcess>:
void subKeyProcess(int key){
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	button_flag[key] = 1;
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <subKeyProcess+0x1c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2101      	movs	r1, #1
 8000572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	200003d0 	.word	0x200003d0

08000584 <getKeyInput>:
void getKeyInput(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	for(int i = 1; i <= 3; i++){
 800058a:	2301      	movs	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e082      	b.n	8000696 <getKeyInput+0x112>
		KeyReg[i][0] = KeyReg[i][1];
 8000590:	4a45      	ldr	r2, [pc, #276]	; (80006a8 <getKeyInput+0x124>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	011b      	lsls	r3, r3, #4
 8000596:	4413      	add	r3, r2
 8000598:	3304      	adds	r3, #4
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4942      	ldr	r1, [pc, #264]	; (80006a8 <getKeyInput+0x124>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	011b      	lsls	r3, r3, #4
 80005a2:	440b      	add	r3, r1
 80005a4:	601a      	str	r2, [r3, #0]
		KeyReg[i][1] = KeyReg[i][2];
 80005a6:	4a40      	ldr	r2, [pc, #256]	; (80006a8 <getKeyInput+0x124>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	011b      	lsls	r3, r3, #4
 80005ac:	4413      	add	r3, r2
 80005ae:	3308      	adds	r3, #8
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	493d      	ldr	r1, [pc, #244]	; (80006a8 <getKeyInput+0x124>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	440b      	add	r3, r1
 80005ba:	3304      	adds	r3, #4
 80005bc:	601a      	str	r2, [r3, #0]
		KeyReg[i][2] = HAL_GPIO_ReadPin(button_ports[i],button_pins[i]);
 80005be:	4a3b      	ldr	r2, [pc, #236]	; (80006ac <getKeyInput+0x128>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	4618      	mov	r0, r3
 80005c8:	4a39      	ldr	r2, [pc, #228]	; (80006b0 <getKeyInput+0x12c>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	4619      	mov	r1, r3
 80005d4:	f001 fc46 	bl	8001e64 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	4619      	mov	r1, r3
 80005dc:	4a32      	ldr	r2, [pc, #200]	; (80006a8 <getKeyInput+0x124>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	4413      	add	r3, r2
 80005e4:	3308      	adds	r3, #8
 80005e6:	6019      	str	r1, [r3, #0]
		if((KeyReg[i][0] == KeyReg[i][1]) && (KeyReg[i][1] == KeyReg[i][2])){
 80005e8:	4a2f      	ldr	r2, [pc, #188]	; (80006a8 <getKeyInput+0x124>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	4413      	add	r3, r2
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	492d      	ldr	r1, [pc, #180]	; (80006a8 <getKeyInput+0x124>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	440b      	add	r3, r1
 80005fa:	3304      	adds	r3, #4
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d146      	bne.n	8000690 <getKeyInput+0x10c>
 8000602:	4a29      	ldr	r2, [pc, #164]	; (80006a8 <getKeyInput+0x124>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	4413      	add	r3, r2
 800060a:	3304      	adds	r3, #4
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4926      	ldr	r1, [pc, #152]	; (80006a8 <getKeyInput+0x124>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	440b      	add	r3, r1
 8000616:	3308      	adds	r3, #8
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	429a      	cmp	r2, r3
 800061c:	d138      	bne.n	8000690 <getKeyInput+0x10c>
			if(KeyReg[i][3] != KeyReg[i][2]){
 800061e:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <getKeyInput+0x124>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	4413      	add	r3, r2
 8000626:	330c      	adds	r3, #12
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	491f      	ldr	r1, [pc, #124]	; (80006a8 <getKeyInput+0x124>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	440b      	add	r3, r1
 8000632:	3308      	adds	r3, #8
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	d01a      	beq.n	8000670 <getKeyInput+0xec>
				KeyReg[i][3] = KeyReg[i][2];
 800063a:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <getKeyInput+0x124>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	011b      	lsls	r3, r3, #4
 8000640:	4413      	add	r3, r2
 8000642:	3308      	adds	r3, #8
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4918      	ldr	r1, [pc, #96]	; (80006a8 <getKeyInput+0x124>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	440b      	add	r3, r1
 800064e:	330c      	adds	r3, #12
 8000650:	601a      	str	r2, [r3, #0]
				if(KeyReg[i][2] == PRESSED_STATE){
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <getKeyInput+0x124>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	4413      	add	r3, r2
 800065a:	3308      	adds	r3, #8
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d116      	bne.n	8000690 <getKeyInput+0x10c>
					subKeyProcess(i);
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f7ff ff7e 	bl	8000564 <subKeyProcess>
					timeForKeyPress = 100;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <getKeyInput+0x130>)
 800066a:	2264      	movs	r2, #100	; 0x64
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	e00f      	b.n	8000690 <getKeyInput+0x10c>
				}
			}else{
				timeForKeyPress--;
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <getKeyInput+0x130>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3b01      	subs	r3, #1
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <getKeyInput+0x130>)
 8000678:	6013      	str	r3, [r2, #0]
				if(timeForKeyPress == 0){
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <getKeyInput+0x130>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d106      	bne.n	8000690 <getKeyInput+0x10c>
					KeyReg[i][3] = NORMAL_STATE;
 8000682:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <getKeyInput+0x124>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	011b      	lsls	r3, r3, #4
 8000688:	4413      	add	r3, r2
 800068a:	330c      	adds	r3, #12
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
	for(int i = 1; i <= 3; i++){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b03      	cmp	r3, #3
 800069a:	f77f af79 	ble.w	8000590 <getKeyInput+0xc>
				}
			}
		}
	}
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000044 	.word	0x20000044
 80006b0:	20000054 	.word	0x20000054
 80006b4:	20000040 	.word	0x20000040

080006b8 <fsm_automatic>:
int green_time = 3;
int yellow_time = 2;
int index_7LED = 0;


void fsm_automatic(){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	switch(status){
 80006bc:	4bba      	ldr	r3, [pc, #744]	; (80009a8 <fsm_automatic+0x2f0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3b01      	subs	r3, #1
 80006c2:	2b09      	cmp	r3, #9
 80006c4:	f200 81e8 	bhi.w	8000a98 <fsm_automatic+0x3e0>
 80006c8:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <fsm_automatic+0x18>)
 80006ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ce:	bf00      	nop
 80006d0:	08000723 	.word	0x08000723
 80006d4:	08000761 	.word	0x08000761
 80006d8:	0800080d 	.word	0x0800080d
 80006dc:	080008db 	.word	0x080008db
 80006e0:	080009cd 	.word	0x080009cd
 80006e4:	08000a99 	.word	0x08000a99
 80006e8:	08000a99 	.word	0x08000a99
 80006ec:	08000a99 	.word	0x08000a99
 80006f0:	08000a99 	.word	0x08000a99
 80006f4:	080006f9 	.word	0x080006f9
	case 10:
		set_X_axis_light(1, 1, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2101      	movs	r1, #1
 80006fc:	2001      	movs	r0, #1
 80006fe:	f001 f847 	bl	8001790 <set_X_axis_light>
		set_Y_axis_light(1, 1, 1);
 8000702:	2201      	movs	r2, #1
 8000704:	2101      	movs	r1, #1
 8000706:	2001      	movs	r0, #1
 8000708:	f001 f864 	bl	80017d4 <set_Y_axis_light>
		if(isButtonPressed(1)){
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff ff0f 	bl	8000530 <isButtonPressed>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	f000 81c1 	beq.w	8000a9c <fsm_automatic+0x3e4>
			status = INIT;
 800071a:	4ba3      	ldr	r3, [pc, #652]	; (80009a8 <fsm_automatic+0x2f0>)
 800071c:	2201      	movs	r2, #1
 800071e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000720:	e1bc      	b.n	8000a9c <fsm_automatic+0x3e4>
		case INIT:
			setTraffic(red_time, green_time);
 8000722:	4ba2      	ldr	r3, [pc, #648]	; (80009ac <fsm_automatic+0x2f4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4aa2      	ldr	r2, [pc, #648]	; (80009b0 <fsm_automatic+0x2f8>)
 8000728:	6812      	ldr	r2, [r2, #0]
 800072a:	4611      	mov	r1, r2
 800072c:	4618      	mov	r0, r3
 800072e:	f001 f81b 	bl	8001768 <setTraffic>
			setTimer(0, green_time*1000);
 8000732:	4b9f      	ldr	r3, [pc, #636]	; (80009b0 <fsm_automatic+0x2f8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800073a:	fb02 f303 	mul.w	r3, r2, r3
 800073e:	4619      	mov	r1, r3
 8000740:	2000      	movs	r0, #0
 8000742:	f000 ff1f 	bl	8001584 <setTimer>
			setTimer(1, 1000);
 8000746:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800074a:	2001      	movs	r0, #1
 800074c:	f000 ff1a 	bl	8001584 <setTimer>
			setTimer(2, 250);
 8000750:	21fa      	movs	r1, #250	; 0xfa
 8000752:	2002      	movs	r0, #2
 8000754:	f000 ff16 	bl	8001584 <setTimer>
			status = RED_GREEN;
 8000758:	4b93      	ldr	r3, [pc, #588]	; (80009a8 <fsm_automatic+0x2f0>)
 800075a:	2202      	movs	r2, #2
 800075c:	601a      	str	r2, [r3, #0]
			break;
 800075e:	e1a6      	b.n	8000aae <fsm_automatic+0x3f6>
		case RED_GREEN:
			set_X_axis_light(1, 0, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2100      	movs	r1, #0
 8000764:	2001      	movs	r0, #1
 8000766:	f001 f813 	bl	8001790 <set_X_axis_light>
			set_Y_axis_light(0, 1, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2101      	movs	r1, #1
 800076e:	2000      	movs	r0, #0
 8000770:	f001 f830 	bl	80017d4 <set_Y_axis_light>
			if (timer_flag[0] == 1){
 8000774:	4b8f      	ldr	r3, [pc, #572]	; (80009b4 <fsm_automatic+0x2fc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d114      	bne.n	80007a6 <fsm_automatic+0xee>
				setTraffic(yellow_time, yellow_time);
 800077c:	4b8e      	ldr	r3, [pc, #568]	; (80009b8 <fsm_automatic+0x300>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a8d      	ldr	r2, [pc, #564]	; (80009b8 <fsm_automatic+0x300>)
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f000 ffee 	bl	8001768 <setTraffic>
				setTimer(0, yellow_time*1000);
 800078c:	4b8a      	ldr	r3, [pc, #552]	; (80009b8 <fsm_automatic+0x300>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000794:	fb02 f303 	mul.w	r3, r2, r3
 8000798:	4619      	mov	r1, r3
 800079a:	2000      	movs	r0, #0
 800079c:	f000 fef2 	bl	8001584 <setTimer>
				status = RED_YELLOW;
 80007a0:	4b81      	ldr	r3, [pc, #516]	; (80009a8 <fsm_automatic+0x2f0>)
 80007a2:	2203      	movs	r2, #3
 80007a4:	601a      	str	r2, [r3, #0]
			}
			if (timer_flag[1] == 1){
 80007a6:	4b83      	ldr	r3, [pc, #524]	; (80009b4 <fsm_automatic+0x2fc>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d106      	bne.n	80007bc <fsm_automatic+0x104>
				countDown();
 80007ae:	f001 f835 	bl	800181c <countDown>
				setTimer(1, 1000);
 80007b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 fee4 	bl	8001584 <setTimer>
			}
			if (isButtonPressed(1)){
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff feb7 	bl	8000530 <isButtonPressed>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	f000 816b 	beq.w	8000aa0 <fsm_automatic+0x3e8>
				set_X_axis_light(0, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 ffde 	bl	8001790 <set_X_axis_light>
				set_Y_axis_light(0, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fffb 	bl	80017d4 <set_Y_axis_light>
				setTimer(3, 500);
 80007de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007e2:	2003      	movs	r0, #3
 80007e4:	f000 fece 	bl	8001584 <setTimer>
				setTimer(4, 50000);
 80007e8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80007ec:	2004      	movs	r0, #4
 80007ee:	f000 fec9 	bl	8001584 <setTimer>
				man_red_time = 0;
 80007f2:	4b72      	ldr	r3, [pc, #456]	; (80009bc <fsm_automatic+0x304>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
				man_green_time = 0;
 80007f8:	4b71      	ldr	r3, [pc, #452]	; (80009c0 <fsm_automatic+0x308>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
				man_yellow_time = 0;
 80007fe:	4b71      	ldr	r3, [pc, #452]	; (80009c4 <fsm_automatic+0x30c>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 8000804:	4b68      	ldr	r3, [pc, #416]	; (80009a8 <fsm_automatic+0x2f0>)
 8000806:	2206      	movs	r2, #6
 8000808:	601a      	str	r2, [r3, #0]
			}
			break;
 800080a:	e149      	b.n	8000aa0 <fsm_automatic+0x3e8>
		case RED_YELLOW:
			set_X_axis_light(1, 0, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	2001      	movs	r0, #1
 8000812:	f000 ffbd 	bl	8001790 <set_X_axis_light>
			set_Y_axis_light(0, 0, 1);
 8000816:	2201      	movs	r2, #1
 8000818:	2100      	movs	r1, #0
 800081a:	2000      	movs	r0, #0
 800081c:	f000 ffda 	bl	80017d4 <set_Y_axis_light>
			if (timer_flag[0] == 1){
 8000820:	4b64      	ldr	r3, [pc, #400]	; (80009b4 <fsm_automatic+0x2fc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d114      	bne.n	8000852 <fsm_automatic+0x19a>
				setTraffic(green_time, red_time);
 8000828:	4b61      	ldr	r3, [pc, #388]	; (80009b0 <fsm_automatic+0x2f8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a5f      	ldr	r2, [pc, #380]	; (80009ac <fsm_automatic+0x2f4>)
 800082e:	6812      	ldr	r2, [r2, #0]
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f000 ff98 	bl	8001768 <setTraffic>
				setTimer(0, green_time*1000);
 8000838:	4b5d      	ldr	r3, [pc, #372]	; (80009b0 <fsm_automatic+0x2f8>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000840:	fb02 f303 	mul.w	r3, r2, r3
 8000844:	4619      	mov	r1, r3
 8000846:	2000      	movs	r0, #0
 8000848:	f000 fe9c 	bl	8001584 <setTimer>
				status = GREEN_RED;
 800084c:	4b56      	ldr	r3, [pc, #344]	; (80009a8 <fsm_automatic+0x2f0>)
 800084e:	2204      	movs	r2, #4
 8000850:	601a      	str	r2, [r3, #0]
			}
			if (timer_flag[1] == 1){
 8000852:	4b58      	ldr	r3, [pc, #352]	; (80009b4 <fsm_automatic+0x2fc>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d117      	bne.n	800088a <fsm_automatic+0x1d2>
				updateClockBuffer();
 800085a:	f000 fd23 	bl	80012a4 <updateClockBuffer>
						update7seg(index_7LED++);
 800085e:	4b5a      	ldr	r3, [pc, #360]	; (80009c8 <fsm_automatic+0x310>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	4958      	ldr	r1, [pc, #352]	; (80009c8 <fsm_automatic+0x310>)
 8000866:	600a      	str	r2, [r1, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fc85 	bl	8001178 <update7seg>
						if (index_7LED >= 4){
 800086e:	4b56      	ldr	r3, [pc, #344]	; (80009c8 <fsm_automatic+0x310>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b03      	cmp	r3, #3
 8000874:	dd02      	ble.n	800087c <fsm_automatic+0x1c4>
							index_7LED = 0;
 8000876:	4b54      	ldr	r3, [pc, #336]	; (80009c8 <fsm_automatic+0x310>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
						}
				countDown();
 800087c:	f000 ffce 	bl	800181c <countDown>
				setTimer(1, 1000);
 8000880:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000884:	2001      	movs	r0, #1
 8000886:	f000 fe7d 	bl	8001584 <setTimer>
			}
			if (isButtonPressed(1)){
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff fe50 	bl	8000530 <isButtonPressed>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	f000 8106 	beq.w	8000aa4 <fsm_automatic+0x3ec>
				set_X_axis_light(0, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2000      	movs	r0, #0
 800089e:	f000 ff77 	bl	8001790 <set_X_axis_light>
				set_Y_axis_light(0, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 ff94 	bl	80017d4 <set_Y_axis_light>
				setTimer(3, 500);
 80008ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 fe67 	bl	8001584 <setTimer>
				setTimer(4, 10000);
 80008b6:	f242 7110 	movw	r1, #10000	; 0x2710
 80008ba:	2004      	movs	r0, #4
 80008bc:	f000 fe62 	bl	8001584 <setTimer>
				man_red_time = 0;
 80008c0:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <fsm_automatic+0x304>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
				man_green_time = 0;
 80008c6:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <fsm_automatic+0x308>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
				man_yellow_time = 0;
 80008cc:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <fsm_automatic+0x30c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 80008d2:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <fsm_automatic+0x2f0>)
 80008d4:	2206      	movs	r2, #6
 80008d6:	601a      	str	r2, [r3, #0]
			}
			break;
 80008d8:	e0e4      	b.n	8000aa4 <fsm_automatic+0x3ec>
		case GREEN_RED:
			set_X_axis_light(0, 1, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2101      	movs	r1, #1
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 ff56 	bl	8001790 <set_X_axis_light>
			set_Y_axis_light(1, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2001      	movs	r0, #1
 80008ea:	f000 ff73 	bl	80017d4 <set_Y_axis_light>
			if (timer_flag[0] == 1){
 80008ee:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <fsm_automatic+0x2fc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d114      	bne.n	8000920 <fsm_automatic+0x268>
				setTraffic(yellow_time, yellow_time);
 80008f6:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <fsm_automatic+0x300>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a2f      	ldr	r2, [pc, #188]	; (80009b8 <fsm_automatic+0x300>)
 80008fc:	6812      	ldr	r2, [r2, #0]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f000 ff31 	bl	8001768 <setTraffic>
				setTimer(0, yellow_time*1000);
 8000906:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <fsm_automatic+0x300>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800090e:	fb02 f303 	mul.w	r3, r2, r3
 8000912:	4619      	mov	r1, r3
 8000914:	2000      	movs	r0, #0
 8000916:	f000 fe35 	bl	8001584 <setTimer>
				status = YELLOW_RED;
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <fsm_automatic+0x2f0>)
 800091c:	2205      	movs	r2, #5
 800091e:	601a      	str	r2, [r3, #0]
			}
			if (timer_flag[1] == 1){
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <fsm_automatic+0x2fc>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d117      	bne.n	8000958 <fsm_automatic+0x2a0>
				updateClockBuffer();
 8000928:	f000 fcbc 	bl	80012a4 <updateClockBuffer>
						update7seg(index_7LED++);
 800092c:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <fsm_automatic+0x310>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	4925      	ldr	r1, [pc, #148]	; (80009c8 <fsm_automatic+0x310>)
 8000934:	600a      	str	r2, [r1, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fc1e 	bl	8001178 <update7seg>
						if (index_7LED >= 4){
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <fsm_automatic+0x310>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b03      	cmp	r3, #3
 8000942:	dd02      	ble.n	800094a <fsm_automatic+0x292>
							index_7LED = 0;
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <fsm_automatic+0x310>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
						}
				countDown();
 800094a:	f000 ff67 	bl	800181c <countDown>
				setTimer(1, 1000);
 800094e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000952:	2001      	movs	r0, #1
 8000954:	f000 fe16 	bl	8001584 <setTimer>
			}
			if (isButtonPressed(1)){
 8000958:	2001      	movs	r0, #1
 800095a:	f7ff fde9 	bl	8000530 <isButtonPressed>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	f000 80a1 	beq.w	8000aa8 <fsm_automatic+0x3f0>
				set_X_axis_light(0, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2000      	movs	r0, #0
 800096c:	f000 ff10 	bl	8001790 <set_X_axis_light>
				set_Y_axis_light(0, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2000      	movs	r0, #0
 8000976:	f000 ff2d 	bl	80017d4 <set_Y_axis_light>
				setTimer(3, 500);
 800097a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800097e:	2003      	movs	r0, #3
 8000980:	f000 fe00 	bl	8001584 <setTimer>
				setTimer(4, 10000);
 8000984:	f242 7110 	movw	r1, #10000	; 0x2710
 8000988:	2004      	movs	r0, #4
 800098a:	f000 fdfb 	bl	8001584 <setTimer>
				man_red_time = 0;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <fsm_automatic+0x304>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
				man_green_time = 0;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <fsm_automatic+0x308>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
				man_yellow_time = 0;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <fsm_automatic+0x30c>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 80009a0:	4b01      	ldr	r3, [pc, #4]	; (80009a8 <fsm_automatic+0x2f0>)
 80009a2:	2206      	movs	r2, #6
 80009a4:	601a      	str	r2, [r3, #0]
			}
			break;
 80009a6:	e07f      	b.n	8000aa8 <fsm_automatic+0x3f0>
 80009a8:	20000064 	.word	0x20000064
 80009ac:	20000068 	.word	0x20000068
 80009b0:	2000006c 	.word	0x2000006c
 80009b4:	20000440 	.word	0x20000440
 80009b8:	20000070 	.word	0x20000070
 80009bc:	200003e4 	.word	0x200003e4
 80009c0:	200003ec 	.word	0x200003ec
 80009c4:	200003e8 	.word	0x200003e8
 80009c8:	200003e0 	.word	0x200003e0
		case YELLOW_RED:
			set_X_axis_light(0, 0, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2100      	movs	r1, #0
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 fedd 	bl	8001790 <set_X_axis_light>
			set_Y_axis_light(1, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 fefa 	bl	80017d4 <set_Y_axis_light>
			if (timer_flag[0] == 1){
 80009e0:	4b40      	ldr	r3, [pc, #256]	; (8000ae4 <fsm_automatic+0x42c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d114      	bne.n	8000a12 <fsm_automatic+0x35a>
				setTraffic(red_time, green_time);
 80009e8:	4b3f      	ldr	r3, [pc, #252]	; (8000ae8 <fsm_automatic+0x430>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a3f      	ldr	r2, [pc, #252]	; (8000aec <fsm_automatic+0x434>)
 80009ee:	6812      	ldr	r2, [r2, #0]
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 feb8 	bl	8001768 <setTraffic>
				setTimer(0, red_time*1000);
 80009f8:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <fsm_automatic+0x430>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a00:	fb02 f303 	mul.w	r3, r2, r3
 8000a04:	4619      	mov	r1, r3
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 fdbc 	bl	8001584 <setTimer>
				status = RED_GREEN;
 8000a0c:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <fsm_automatic+0x438>)
 8000a0e:	2202      	movs	r2, #2
 8000a10:	601a      	str	r2, [r3, #0]
			}
			if (timer_flag[1] == 1){
 8000a12:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <fsm_automatic+0x42c>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d117      	bne.n	8000a4a <fsm_automatic+0x392>
				updateClockBuffer();
 8000a1a:	f000 fc43 	bl	80012a4 <updateClockBuffer>
						update7seg(index_7LED++);
 8000a1e:	4b35      	ldr	r3, [pc, #212]	; (8000af4 <fsm_automatic+0x43c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	4933      	ldr	r1, [pc, #204]	; (8000af4 <fsm_automatic+0x43c>)
 8000a26:	600a      	str	r2, [r1, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fba5 	bl	8001178 <update7seg>
						if (index_7LED >= 4){
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <fsm_automatic+0x43c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	dd02      	ble.n	8000a3c <fsm_automatic+0x384>
							index_7LED = 0;
 8000a36:	4b2f      	ldr	r3, [pc, #188]	; (8000af4 <fsm_automatic+0x43c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
						}
				countDown();
 8000a3c:	f000 feee 	bl	800181c <countDown>
				setTimer(1, 1000);
 8000a40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a44:	2001      	movs	r0, #1
 8000a46:	f000 fd9d 	bl	8001584 <setTimer>
			}
			if (isButtonPressed(1)){
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f7ff fd70 	bl	8000530 <isButtonPressed>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d02a      	beq.n	8000aac <fsm_automatic+0x3f4>
				set_X_axis_light(0, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 fe98 	bl	8001790 <set_X_axis_light>
				set_Y_axis_light(0, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 feb5 	bl	80017d4 <set_Y_axis_light>
				setTimer(3, 500);
 8000a6a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a6e:	2003      	movs	r0, #3
 8000a70:	f000 fd88 	bl	8001584 <setTimer>
				setTimer(4, 10000);
 8000a74:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a78:	2004      	movs	r0, #4
 8000a7a:	f000 fd83 	bl	8001584 <setTimer>
				man_red_time = 0;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <fsm_automatic+0x440>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
				man_green_time = 0;
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <fsm_automatic+0x444>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
				man_yellow_time = 0;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <fsm_automatic+0x448>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <fsm_automatic+0x438>)
 8000a92:	2206      	movs	r2, #6
 8000a94:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a96:	e009      	b.n	8000aac <fsm_automatic+0x3f4>
		default:
			break;
 8000a98:	bf00      	nop
 8000a9a:	e008      	b.n	8000aae <fsm_automatic+0x3f6>
		break;
 8000a9c:	bf00      	nop
 8000a9e:	e006      	b.n	8000aae <fsm_automatic+0x3f6>
			break;
 8000aa0:	bf00      	nop
 8000aa2:	e004      	b.n	8000aae <fsm_automatic+0x3f6>
			break;
 8000aa4:	bf00      	nop
 8000aa6:	e002      	b.n	8000aae <fsm_automatic+0x3f6>
			break;
 8000aa8:	bf00      	nop
 8000aaa:	e000      	b.n	8000aae <fsm_automatic+0x3f6>
			break;
 8000aac:	bf00      	nop
	}

	if (timer_flag[2] == 1) {
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <fsm_automatic+0x42c>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d114      	bne.n	8000ae0 <fsm_automatic+0x428>
		updateClockBuffer();
 8000ab6:	f000 fbf5 	bl	80012a4 <updateClockBuffer>
		update7seg(index_7LED++);
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <fsm_automatic+0x43c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <fsm_automatic+0x43c>)
 8000ac2:	600a      	str	r2, [r1, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fb57 	bl	8001178 <update7seg>
		if (index_7LED >= 4){
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <fsm_automatic+0x43c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	dd02      	ble.n	8000ad8 <fsm_automatic+0x420>
			index_7LED = 0;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <fsm_automatic+0x43c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
		}
		setTimer(2, 250);
 8000ad8:	21fa      	movs	r1, #250	; 0xfa
 8000ada:	2002      	movs	r0, #2
 8000adc:	f000 fd52 	bl	8001584 <setTimer>
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000440 	.word	0x20000440
 8000ae8:	20000068 	.word	0x20000068
 8000aec:	2000006c 	.word	0x2000006c
 8000af0:	20000064 	.word	0x20000064
 8000af4:	200003e0 	.word	0x200003e0
 8000af8:	200003e4 	.word	0x200003e4
 8000afc:	200003ec 	.word	0x200003ec
 8000b00:	200003e8 	.word	0x200003e8

08000b04 <fsm_manual>:

int man_red_time = 0;
int man_yellow_time = 0;
int man_green_time = 0;

void fsm_manual(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	switch(status){
 8000b08:	4b82      	ldr	r3, [pc, #520]	; (8000d14 <fsm_manual+0x210>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b08      	cmp	r3, #8
 8000b0e:	f000 8111 	beq.w	8000d34 <fsm_manual+0x230>
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	f300 818a 	bgt.w	8000e2c <fsm_manual+0x328>
 8000b18:	2b06      	cmp	r3, #6
 8000b1a:	d002      	beq.n	8000b22 <fsm_manual+0x1e>
 8000b1c:	2b07      	cmp	r3, #7
 8000b1e:	d07c      	beq.n	8000c1a <fsm_manual+0x116>
			set_X_axis_light(0, 0, 0);
			set_Y_axis_light(0, 0, 0);
		}
		break;
	default:
		break;
 8000b20:	e184      	b.n	8000e2c <fsm_manual+0x328>
		setTraffic(man_red_time, 2);
 8000b22:	4b7d      	ldr	r3, [pc, #500]	; (8000d18 <fsm_manual+0x214>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2102      	movs	r1, #2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 fe1d 	bl	8001768 <setTraffic>
		if (timer_flag[3] == 1){
 8000b2e:	4b7b      	ldr	r3, [pc, #492]	; (8000d1c <fsm_manual+0x218>)
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d10c      	bne.n	8000b50 <fsm_manual+0x4c>
			HAL_GPIO_TogglePin(RED_0_GPIO_Port, RED_0_Pin);
 8000b36:	2110      	movs	r1, #16
 8000b38:	4879      	ldr	r0, [pc, #484]	; (8000d20 <fsm_manual+0x21c>)
 8000b3a:	f001 f9c2 	bl	8001ec2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	4877      	ldr	r0, [pc, #476]	; (8000d20 <fsm_manual+0x21c>)
 8000b42:	f001 f9be 	bl	8001ec2 <HAL_GPIO_TogglePin>
			setTimer(3, 500);
 8000b46:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f000 fd1a 	bl	8001584 <setTimer>
		if(timer_flag[4] == 1){
 8000b50:	4b72      	ldr	r3, [pc, #456]	; (8000d1c <fsm_manual+0x218>)
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d10b      	bne.n	8000b70 <fsm_manual+0x6c>
			status = INIT;
 8000b58:	4b6e      	ldr	r3, [pc, #440]	; (8000d14 <fsm_manual+0x210>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
			red_time = 5;
 8000b5e:	4b71      	ldr	r3, [pc, #452]	; (8000d24 <fsm_manual+0x220>)
 8000b60:	2205      	movs	r2, #5
 8000b62:	601a      	str	r2, [r3, #0]
			green_time = 3;
 8000b64:	4b70      	ldr	r3, [pc, #448]	; (8000d28 <fsm_manual+0x224>)
 8000b66:	2203      	movs	r2, #3
 8000b68:	601a      	str	r2, [r3, #0]
			yellow_time = 2;
 8000b6a:	4b70      	ldr	r3, [pc, #448]	; (8000d2c <fsm_manual+0x228>)
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(1)){
 8000b70:	2001      	movs	r0, #1
 8000b72:	f7ff fcdd 	bl	8000530 <isButtonPressed>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d016      	beq.n	8000baa <fsm_manual+0xa6>
			set_X_axis_light(0, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 fe05 	bl	8001790 <set_X_axis_light>
			set_Y_axis_light(0, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 fe22 	bl	80017d4 <set_Y_axis_light>
			setTimer(3, 500);
 8000b90:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 fcf5 	bl	8001584 <setTimer>
			status = MAN_YELLOW;
 8000b9a:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <fsm_manual+0x210>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
			setTimer(4, 10000);
 8000ba0:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ba4:	2004      	movs	r0, #4
 8000ba6:	f000 fced 	bl	8001584 <setTimer>
		if(isButtonPressed(2)){
 8000baa:	2002      	movs	r0, #2
 8000bac:	f7ff fcc0 	bl	8000530 <isButtonPressed>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d011      	beq.n	8000bda <fsm_manual+0xd6>
			man_red_time++;
 8000bb6:	4b58      	ldr	r3, [pc, #352]	; (8000d18 <fsm_manual+0x214>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a56      	ldr	r2, [pc, #344]	; (8000d18 <fsm_manual+0x214>)
 8000bbe:	6013      	str	r3, [r2, #0]
			if(man_red_time > 99){
 8000bc0:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <fsm_manual+0x214>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b63      	cmp	r3, #99	; 0x63
 8000bc6:	dd03      	ble.n	8000bd0 <fsm_manual+0xcc>
				man_red_time = red_time;
 8000bc8:	4b56      	ldr	r3, [pc, #344]	; (8000d24 <fsm_manual+0x220>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a52      	ldr	r2, [pc, #328]	; (8000d18 <fsm_manual+0x214>)
 8000bce:	6013      	str	r3, [r2, #0]
			setTimer(4, 10000);
 8000bd0:	f242 7110 	movw	r1, #10000	; 0x2710
 8000bd4:	2004      	movs	r0, #4
 8000bd6:	f000 fcd5 	bl	8001584 <setTimer>
		if(isButtonPressed(3)){
 8000bda:	2003      	movs	r0, #3
 8000bdc:	f7ff fca8 	bl	8000530 <isButtonPressed>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 8124 	beq.w	8000e30 <fsm_manual+0x32c>
			red_time = man_red_time;
 8000be8:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <fsm_manual+0x214>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a4d      	ldr	r2, [pc, #308]	; (8000d24 <fsm_manual+0x220>)
 8000bee:	6013      	str	r3, [r2, #0]
			green_time = red_time - yellow_time;
 8000bf0:	4b4c      	ldr	r3, [pc, #304]	; (8000d24 <fsm_manual+0x220>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b4d      	ldr	r3, [pc, #308]	; (8000d2c <fsm_manual+0x228>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	4a4b      	ldr	r2, [pc, #300]	; (8000d28 <fsm_manual+0x224>)
 8000bfc:	6013      	str	r3, [r2, #0]
			set_X_axis_light(0, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 fdc4 	bl	8001790 <set_X_axis_light>
			set_Y_axis_light(0, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 fde1 	bl	80017d4 <set_Y_axis_light>
			status = MAN_YELLOW;
 8000c12:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <fsm_manual+0x210>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
		break;
 8000c18:	e10a      	b.n	8000e30 <fsm_manual+0x32c>
		setTraffic(man_yellow_time, 3);
 8000c1a:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <fsm_manual+0x22c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2103      	movs	r1, #3
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fda1 	bl	8001768 <setTraffic>
		if (timer_flag[3] == 1){
 8000c26:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <fsm_manual+0x218>)
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d10d      	bne.n	8000c4a <fsm_manual+0x146>
			HAL_GPIO_TogglePin(YELLOW_0_GPIO_Port, YELLOW_0_Pin);
 8000c2e:	2120      	movs	r1, #32
 8000c30:	483b      	ldr	r0, [pc, #236]	; (8000d20 <fsm_manual+0x21c>)
 8000c32:	f001 f946 	bl	8001ec2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8000c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3a:	4839      	ldr	r0, [pc, #228]	; (8000d20 <fsm_manual+0x21c>)
 8000c3c:	f001 f941 	bl	8001ec2 <HAL_GPIO_TogglePin>
			setTimer(3, 500);
 8000c40:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 fc9d 	bl	8001584 <setTimer>
		if(timer_flag[4] == 1){
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <fsm_manual+0x218>)
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d10b      	bne.n	8000c6a <fsm_manual+0x166>
			status = INIT;
 8000c52:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <fsm_manual+0x210>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
			red_time = 5;
 8000c58:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <fsm_manual+0x220>)
 8000c5a:	2205      	movs	r2, #5
 8000c5c:	601a      	str	r2, [r3, #0]
			green_time = 3;
 8000c5e:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <fsm_manual+0x224>)
 8000c60:	2203      	movs	r2, #3
 8000c62:	601a      	str	r2, [r3, #0]
			yellow_time = 2;
 8000c64:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <fsm_manual+0x228>)
 8000c66:	2202      	movs	r2, #2
 8000c68:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(1)){
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff fc60 	bl	8000530 <isButtonPressed>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d016      	beq.n	8000ca4 <fsm_manual+0x1a0>
			set_X_axis_light(0, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 fd88 	bl	8001790 <set_X_axis_light>
			set_Y_axis_light(0, 0, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 fda5 	bl	80017d4 <set_Y_axis_light>
			setTimer(3, 500);
 8000c8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c8e:	2003      	movs	r0, #3
 8000c90:	f000 fc78 	bl	8001584 <setTimer>
			status = MAN_GREEN;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <fsm_manual+0x210>)
 8000c96:	2208      	movs	r2, #8
 8000c98:	601a      	str	r2, [r3, #0]
			setTimer(4, 10000);
 8000c9a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c9e:	2004      	movs	r0, #4
 8000ca0:	f000 fc70 	bl	8001584 <setTimer>
		if(isButtonPressed(2)){
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f7ff fc43 	bl	8000530 <isButtonPressed>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d011      	beq.n	8000cd4 <fsm_manual+0x1d0>
			man_yellow_time++;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <fsm_manual+0x22c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <fsm_manual+0x22c>)
 8000cb8:	6013      	str	r3, [r2, #0]
			if(man_yellow_time > 99){
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <fsm_manual+0x22c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b63      	cmp	r3, #99	; 0x63
 8000cc0:	dd03      	ble.n	8000cca <fsm_manual+0x1c6>
				man_yellow_time = yellow_time;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <fsm_manual+0x228>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <fsm_manual+0x22c>)
 8000cc8:	6013      	str	r3, [r2, #0]
			setTimer(4, 10000);
 8000cca:	f242 7110 	movw	r1, #10000	; 0x2710
 8000cce:	2004      	movs	r0, #4
 8000cd0:	f000 fc58 	bl	8001584 <setTimer>
		if(isButtonPressed(3)){
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f7ff fc2b 	bl	8000530 <isButtonPressed>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f000 80a9 	beq.w	8000e34 <fsm_manual+0x330>
			yellow_time = man_yellow_time;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <fsm_manual+0x22c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a11      	ldr	r2, [pc, #68]	; (8000d2c <fsm_manual+0x228>)
 8000ce8:	6013      	str	r3, [r2, #0]
			red_time = green_time + yellow_time;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <fsm_manual+0x224>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <fsm_manual+0x228>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <fsm_manual+0x220>)
 8000cf6:	6013      	str	r3, [r2, #0]
			status = MAN_GREEN;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <fsm_manual+0x210>)
 8000cfa:	2208      	movs	r2, #8
 8000cfc:	601a      	str	r2, [r3, #0]
			set_X_axis_light(0, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 fd44 	bl	8001790 <set_X_axis_light>
			set_Y_axis_light(0, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f000 fd61 	bl	80017d4 <set_Y_axis_light>
		break;
 8000d12:	e08f      	b.n	8000e34 <fsm_manual+0x330>
 8000d14:	20000064 	.word	0x20000064
 8000d18:	200003e4 	.word	0x200003e4
 8000d1c:	20000440 	.word	0x20000440
 8000d20:	40010800 	.word	0x40010800
 8000d24:	20000068 	.word	0x20000068
 8000d28:	2000006c 	.word	0x2000006c
 8000d2c:	20000070 	.word	0x20000070
 8000d30:	200003e8 	.word	0x200003e8
		setTraffic(man_green_time, 4);
 8000d34:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <fsm_manual+0x33c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fd14 	bl	8001768 <setTraffic>
		if (timer_flag[3] == 1){
 8000d40:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <fsm_manual+0x340>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d10d      	bne.n	8000d64 <fsm_manual+0x260>
			HAL_GPIO_TogglePin(GREEN_0_GPIO_Port, GREEN_0_Pin);
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	483f      	ldr	r0, [pc, #252]	; (8000e48 <fsm_manual+0x344>)
 8000d4c:	f001 f8b9 	bl	8001ec2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 8000d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d54:	483c      	ldr	r0, [pc, #240]	; (8000e48 <fsm_manual+0x344>)
 8000d56:	f001 f8b4 	bl	8001ec2 <HAL_GPIO_TogglePin>
			setTimer(3, 500);
 8000d5a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f000 fc10 	bl	8001584 <setTimer>
		if(timer_flag[4] == 1){
 8000d64:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <fsm_manual+0x340>)
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10b      	bne.n	8000d84 <fsm_manual+0x280>
			status = INIT;
 8000d6c:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <fsm_manual+0x348>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
			red_time = 5;
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <fsm_manual+0x34c>)
 8000d74:	2205      	movs	r2, #5
 8000d76:	601a      	str	r2, [r3, #0]
			green_time = 3;
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <fsm_manual+0x350>)
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	601a      	str	r2, [r3, #0]
			yellow_time = 2;
 8000d7e:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <fsm_manual+0x354>)
 8000d80:	2202      	movs	r2, #2
 8000d82:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(1)){
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff fbd3 	bl	8000530 <isButtonPressed>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d016      	beq.n	8000dbe <fsm_manual+0x2ba>
			set_X_axis_light(0, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 fcfb 	bl	8001790 <set_X_axis_light>
			set_Y_axis_light(0, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 fd18 	bl	80017d4 <set_Y_axis_light>
			setTimer(3, 500);
 8000da4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 fbeb 	bl	8001584 <setTimer>
			setTimer(4, 10000);
 8000dae:	f242 7110 	movw	r1, #10000	; 0x2710
 8000db2:	2004      	movs	r0, #4
 8000db4:	f000 fbe6 	bl	8001584 <setTimer>
			status = INIT;
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <fsm_manual+0x348>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2)){
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f7ff fbb6 	bl	8000530 <isButtonPressed>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d011      	beq.n	8000dee <fsm_manual+0x2ea>
			man_green_time++;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <fsm_manual+0x33c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <fsm_manual+0x33c>)
 8000dd2:	6013      	str	r3, [r2, #0]
			if(man_green_time > 99){
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <fsm_manual+0x33c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b63      	cmp	r3, #99	; 0x63
 8000dda:	dd03      	ble.n	8000de4 <fsm_manual+0x2e0>
				man_green_time = green_time;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <fsm_manual+0x350>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <fsm_manual+0x33c>)
 8000de2:	6013      	str	r3, [r2, #0]
			setTimer(4, 10000);
 8000de4:	f242 7110 	movw	r1, #10000	; 0x2710
 8000de8:	2004      	movs	r0, #4
 8000dea:	f000 fbcb 	bl	8001584 <setTimer>
		if(isButtonPressed(3)){
 8000dee:	2003      	movs	r0, #3
 8000df0:	f7ff fb9e 	bl	8000530 <isButtonPressed>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d01e      	beq.n	8000e38 <fsm_manual+0x334>
			green_time = man_green_time;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <fsm_manual+0x33c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <fsm_manual+0x350>)
 8000e00:	6013      	str	r3, [r2, #0]
			red_time = green_time + yellow_time;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <fsm_manual+0x350>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <fsm_manual+0x354>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <fsm_manual+0x34c>)
 8000e0e:	6013      	str	r3, [r2, #0]
			status = INIT;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <fsm_manual+0x348>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
			set_X_axis_light(0, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 fcb8 	bl	8001790 <set_X_axis_light>
			set_Y_axis_light(0, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 fcd5 	bl	80017d4 <set_Y_axis_light>
		break;
 8000e2a:	e005      	b.n	8000e38 <fsm_manual+0x334>
		break;
 8000e2c:	bf00      	nop
 8000e2e:	e004      	b.n	8000e3a <fsm_manual+0x336>
		break;
 8000e30:	bf00      	nop
 8000e32:	e002      	b.n	8000e3a <fsm_manual+0x336>
		break;
 8000e34:	bf00      	nop
 8000e36:	e000      	b.n	8000e3a <fsm_manual+0x336>
		break;
 8000e38:	bf00      	nop
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200003ec 	.word	0x200003ec
 8000e44:	20000440 	.word	0x20000440
 8000e48:	40010800 	.word	0x40010800
 8000e4c:	20000064 	.word	0x20000064
 8000e50:	20000068 	.word	0x20000068
 8000e54:	2000006c 	.word	0x2000006c
 8000e58:	20000070 	.word	0x20000070

08000e5c <display7seg>:
 */


#include "led7_segment.h"

void display7seg(int num){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b09      	cmp	r3, #9
 8000e68:	f200 8180 	bhi.w	800116c <display7seg+0x310>
 8000e6c:	a201      	add	r2, pc, #4	; (adr r2, 8000e74 <display7seg+0x18>)
 8000e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e72:	bf00      	nop
 8000e74:	08000e9d 	.word	0x08000e9d
 8000e78:	08000ee5 	.word	0x08000ee5
 8000e7c:	08000f2d 	.word	0x08000f2d
 8000e80:	08000f75 	.word	0x08000f75
 8000e84:	08000fbd 	.word	0x08000fbd
 8000e88:	08001005 	.word	0x08001005
 8000e8c:	0800104d 	.word	0x0800104d
 8000e90:	08001095 	.word	0x08001095
 8000e94:	080010dd 	.word	0x080010dd
 8000e98:	08001125 	.word	0x08001125
	switch (num) {
		  case 0:
			  	  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	48b4      	ldr	r0, [pc, #720]	; (8001174 <display7seg+0x318>)
 8000ea2:	f000 fff6 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	48b2      	ldr	r0, [pc, #712]	; (8001174 <display7seg+0x318>)
 8000eac:	f000 fff1 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	48af      	ldr	r0, [pc, #700]	; (8001174 <display7seg+0x318>)
 8000eb6:	f000 ffec 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2108      	movs	r1, #8
 8000ebe:	48ad      	ldr	r0, [pc, #692]	; (8001174 <display7seg+0x318>)
 8000ec0:	f000 ffe7 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	48aa      	ldr	r0, [pc, #680]	; (8001174 <display7seg+0x318>)
 8000eca:	f000 ffe2 	bl	8001e92 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	48a8      	ldr	r0, [pc, #672]	; (8001174 <display7seg+0x318>)
 8000ed4:	f000 ffdd 	bl	8001e92 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2140      	movs	r1, #64	; 0x40
 8000edc:	48a5      	ldr	r0, [pc, #660]	; (8001174 <display7seg+0x318>)
 8000ede:	f000 ffd8 	bl	8001e92 <HAL_GPIO_WritePin>
			  break;
 8000ee2:	e143      	b.n	800116c <display7seg+0x310>
		  case 1:
			  	  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	48a2      	ldr	r0, [pc, #648]	; (8001174 <display7seg+0x318>)
 8000eea:	f000 ffd2 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	48a0      	ldr	r0, [pc, #640]	; (8001174 <display7seg+0x318>)
 8000ef4:	f000 ffcd 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2104      	movs	r1, #4
 8000efc:	489d      	ldr	r0, [pc, #628]	; (8001174 <display7seg+0x318>)
 8000efe:	f000 ffc8 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2108      	movs	r1, #8
 8000f06:	489b      	ldr	r0, [pc, #620]	; (8001174 <display7seg+0x318>)
 8000f08:	f000 ffc3 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2110      	movs	r1, #16
 8000f10:	4898      	ldr	r0, [pc, #608]	; (8001174 <display7seg+0x318>)
 8000f12:	f000 ffbe 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	2120      	movs	r1, #32
 8000f1a:	4896      	ldr	r0, [pc, #600]	; (8001174 <display7seg+0x318>)
 8000f1c:	f000 ffb9 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2140      	movs	r1, #64	; 0x40
 8000f24:	4893      	ldr	r0, [pc, #588]	; (8001174 <display7seg+0x318>)
 8000f26:	f000 ffb4 	bl	8001e92 <HAL_GPIO_WritePin>
			  break;
 8000f2a:	e11f      	b.n	800116c <display7seg+0x310>
		  case 2:
			  	  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4890      	ldr	r0, [pc, #576]	; (8001174 <display7seg+0x318>)
 8000f32:	f000 ffae 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2102      	movs	r1, #2
 8000f3a:	488e      	ldr	r0, [pc, #568]	; (8001174 <display7seg+0x318>)
 8000f3c:	f000 ffa9 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2104      	movs	r1, #4
 8000f44:	488b      	ldr	r0, [pc, #556]	; (8001174 <display7seg+0x318>)
 8000f46:	f000 ffa4 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2108      	movs	r1, #8
 8000f4e:	4889      	ldr	r0, [pc, #548]	; (8001174 <display7seg+0x318>)
 8000f50:	f000 ff9f 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2110      	movs	r1, #16
 8000f58:	4886      	ldr	r0, [pc, #536]	; (8001174 <display7seg+0x318>)
 8000f5a:	f000 ff9a 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2120      	movs	r1, #32
 8000f62:	4884      	ldr	r0, [pc, #528]	; (8001174 <display7seg+0x318>)
 8000f64:	f000 ff95 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2140      	movs	r1, #64	; 0x40
 8000f6c:	4881      	ldr	r0, [pc, #516]	; (8001174 <display7seg+0x318>)
 8000f6e:	f000 ff90 	bl	8001e92 <HAL_GPIO_WritePin>
			  break;
 8000f72:	e0fb      	b.n	800116c <display7seg+0x310>
		  case 3:
			  	  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2101      	movs	r1, #1
 8000f78:	487e      	ldr	r0, [pc, #504]	; (8001174 <display7seg+0x318>)
 8000f7a:	f000 ff8a 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2102      	movs	r1, #2
 8000f82:	487c      	ldr	r0, [pc, #496]	; (8001174 <display7seg+0x318>)
 8000f84:	f000 ff85 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	4879      	ldr	r0, [pc, #484]	; (8001174 <display7seg+0x318>)
 8000f8e:	f000 ff80 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2108      	movs	r1, #8
 8000f96:	4877      	ldr	r0, [pc, #476]	; (8001174 <display7seg+0x318>)
 8000f98:	f000 ff7b 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	4874      	ldr	r0, [pc, #464]	; (8001174 <display7seg+0x318>)
 8000fa2:	f000 ff76 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2120      	movs	r1, #32
 8000faa:	4872      	ldr	r0, [pc, #456]	; (8001174 <display7seg+0x318>)
 8000fac:	f000 ff71 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2140      	movs	r1, #64	; 0x40
 8000fb4:	486f      	ldr	r0, [pc, #444]	; (8001174 <display7seg+0x318>)
 8000fb6:	f000 ff6c 	bl	8001e92 <HAL_GPIO_WritePin>
			  break;
 8000fba:	e0d7      	b.n	800116c <display7seg+0x310>
		  case 4:
			  	  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	486c      	ldr	r0, [pc, #432]	; (8001174 <display7seg+0x318>)
 8000fc2:	f000 ff66 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2102      	movs	r1, #2
 8000fca:	486a      	ldr	r0, [pc, #424]	; (8001174 <display7seg+0x318>)
 8000fcc:	f000 ff61 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4867      	ldr	r0, [pc, #412]	; (8001174 <display7seg+0x318>)
 8000fd6:	f000 ff5c 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2108      	movs	r1, #8
 8000fde:	4865      	ldr	r0, [pc, #404]	; (8001174 <display7seg+0x318>)
 8000fe0:	f000 ff57 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	4862      	ldr	r0, [pc, #392]	; (8001174 <display7seg+0x318>)
 8000fea:	f000 ff52 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	4860      	ldr	r0, [pc, #384]	; (8001174 <display7seg+0x318>)
 8000ff4:	f000 ff4d 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2140      	movs	r1, #64	; 0x40
 8000ffc:	485d      	ldr	r0, [pc, #372]	; (8001174 <display7seg+0x318>)
 8000ffe:	f000 ff48 	bl	8001e92 <HAL_GPIO_WritePin>
			  break;
 8001002:	e0b3      	b.n	800116c <display7seg+0x310>
		  case 5:
			  	  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2101      	movs	r1, #1
 8001008:	485a      	ldr	r0, [pc, #360]	; (8001174 <display7seg+0x318>)
 800100a:	f000 ff42 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2102      	movs	r1, #2
 8001012:	4858      	ldr	r0, [pc, #352]	; (8001174 <display7seg+0x318>)
 8001014:	f000 ff3d 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2104      	movs	r1, #4
 800101c:	4855      	ldr	r0, [pc, #340]	; (8001174 <display7seg+0x318>)
 800101e:	f000 ff38 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2108      	movs	r1, #8
 8001026:	4853      	ldr	r0, [pc, #332]	; (8001174 <display7seg+0x318>)
 8001028:	f000 ff33 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	2110      	movs	r1, #16
 8001030:	4850      	ldr	r0, [pc, #320]	; (8001174 <display7seg+0x318>)
 8001032:	f000 ff2e 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2120      	movs	r1, #32
 800103a:	484e      	ldr	r0, [pc, #312]	; (8001174 <display7seg+0x318>)
 800103c:	f000 ff29 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	484b      	ldr	r0, [pc, #300]	; (8001174 <display7seg+0x318>)
 8001046:	f000 ff24 	bl	8001e92 <HAL_GPIO_WritePin>
			  break;
 800104a:	e08f      	b.n	800116c <display7seg+0x310>
		  case 6:
			  	  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2101      	movs	r1, #1
 8001050:	4848      	ldr	r0, [pc, #288]	; (8001174 <display7seg+0x318>)
 8001052:	f000 ff1e 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2102      	movs	r1, #2
 800105a:	4846      	ldr	r0, [pc, #280]	; (8001174 <display7seg+0x318>)
 800105c:	f000 ff19 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2104      	movs	r1, #4
 8001064:	4843      	ldr	r0, [pc, #268]	; (8001174 <display7seg+0x318>)
 8001066:	f000 ff14 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2108      	movs	r1, #8
 800106e:	4841      	ldr	r0, [pc, #260]	; (8001174 <display7seg+0x318>)
 8001070:	f000 ff0f 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	483e      	ldr	r0, [pc, #248]	; (8001174 <display7seg+0x318>)
 800107a:	f000 ff0a 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2120      	movs	r1, #32
 8001082:	483c      	ldr	r0, [pc, #240]	; (8001174 <display7seg+0x318>)
 8001084:	f000 ff05 	bl	8001e92 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2140      	movs	r1, #64	; 0x40
 800108c:	4839      	ldr	r0, [pc, #228]	; (8001174 <display7seg+0x318>)
 800108e:	f000 ff00 	bl	8001e92 <HAL_GPIO_WritePin>
			  break;
 8001092:	e06b      	b.n	800116c <display7seg+0x310>
		  case 7:
		  	  	  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2101      	movs	r1, #1
 8001098:	4836      	ldr	r0, [pc, #216]	; (8001174 <display7seg+0x318>)
 800109a:	f000 fefa 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2102      	movs	r1, #2
 80010a2:	4834      	ldr	r0, [pc, #208]	; (8001174 <display7seg+0x318>)
 80010a4:	f000 fef5 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2104      	movs	r1, #4
 80010ac:	4831      	ldr	r0, [pc, #196]	; (8001174 <display7seg+0x318>)
 80010ae:	f000 fef0 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2108      	movs	r1, #8
 80010b6:	482f      	ldr	r0, [pc, #188]	; (8001174 <display7seg+0x318>)
 80010b8:	f000 feeb 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2110      	movs	r1, #16
 80010c0:	482c      	ldr	r0, [pc, #176]	; (8001174 <display7seg+0x318>)
 80010c2:	f000 fee6 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2120      	movs	r1, #32
 80010ca:	482a      	ldr	r0, [pc, #168]	; (8001174 <display7seg+0x318>)
 80010cc:	f000 fee1 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	4827      	ldr	r0, [pc, #156]	; (8001174 <display7seg+0x318>)
 80010d6:	f000 fedc 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  break;
 80010da:	e047      	b.n	800116c <display7seg+0x310>
		  case 8:
		  	  	  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2101      	movs	r1, #1
 80010e0:	4824      	ldr	r0, [pc, #144]	; (8001174 <display7seg+0x318>)
 80010e2:	f000 fed6 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2102      	movs	r1, #2
 80010ea:	4822      	ldr	r0, [pc, #136]	; (8001174 <display7seg+0x318>)
 80010ec:	f000 fed1 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2104      	movs	r1, #4
 80010f4:	481f      	ldr	r0, [pc, #124]	; (8001174 <display7seg+0x318>)
 80010f6:	f000 fecc 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2108      	movs	r1, #8
 80010fe:	481d      	ldr	r0, [pc, #116]	; (8001174 <display7seg+0x318>)
 8001100:	f000 fec7 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2110      	movs	r1, #16
 8001108:	481a      	ldr	r0, [pc, #104]	; (8001174 <display7seg+0x318>)
 800110a:	f000 fec2 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2120      	movs	r1, #32
 8001112:	4818      	ldr	r0, [pc, #96]	; (8001174 <display7seg+0x318>)
 8001114:	f000 febd 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2140      	movs	r1, #64	; 0x40
 800111c:	4815      	ldr	r0, [pc, #84]	; (8001174 <display7seg+0x318>)
 800111e:	f000 feb8 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  break;
 8001122:	e023      	b.n	800116c <display7seg+0x310>
		  case 9:
		  	  	  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2101      	movs	r1, #1
 8001128:	4812      	ldr	r0, [pc, #72]	; (8001174 <display7seg+0x318>)
 800112a:	f000 feb2 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2102      	movs	r1, #2
 8001132:	4810      	ldr	r0, [pc, #64]	; (8001174 <display7seg+0x318>)
 8001134:	f000 fead 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2104      	movs	r1, #4
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <display7seg+0x318>)
 800113e:	f000 fea8 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2108      	movs	r1, #8
 8001146:	480b      	ldr	r0, [pc, #44]	; (8001174 <display7seg+0x318>)
 8001148:	f000 fea3 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	2110      	movs	r1, #16
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <display7seg+0x318>)
 8001152:	f000 fe9e 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2120      	movs	r1, #32
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <display7seg+0x318>)
 800115c:	f000 fe99 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2140      	movs	r1, #64	; 0x40
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <display7seg+0x318>)
 8001166:	f000 fe94 	bl	8001e92 <HAL_GPIO_WritePin>
		  	  break;
 800116a:	bf00      	nop
		  }
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40010c00 	.word	0x40010c00

08001178 <update7seg>:

int MAX_LED = 4;
int index_led;
int led_buffer [4] = {1, 2, 3, 4};
void update7seg(int index)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b03      	cmp	r3, #3
 8001184:	f200 8084 	bhi.w	8001290 <update7seg+0x118>
 8001188:	a201      	add	r2, pc, #4	; (adr r2, 8001190 <update7seg+0x18>)
 800118a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118e:	bf00      	nop
 8001190:	080011a1 	.word	0x080011a1
 8001194:	080011dd 	.word	0x080011dd
 8001198:	08001219 	.word	0x08001219
 800119c:	08001255 	.word	0x08001255
	switch(index)
	{
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a6:	483d      	ldr	r0, [pc, #244]	; (800129c <update7seg+0x124>)
 80011a8:	f000 fe73 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b2:	483a      	ldr	r0, [pc, #232]	; (800129c <update7seg+0x124>)
 80011b4:	f000 fe6d 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011be:	4837      	ldr	r0, [pc, #220]	; (800129c <update7seg+0x124>)
 80011c0:	f000 fe67 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ca:	4834      	ldr	r0, [pc, #208]	; (800129c <update7seg+0x124>)
 80011cc:	f000 fe61 	bl	8001e92 <HAL_GPIO_WritePin>
		display7seg(led_buffer[0]);
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <update7seg+0x128>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fe41 	bl	8000e5c <display7seg>
		break;
 80011da:	e05a      	b.n	8001292 <update7seg+0x11a>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e2:	482e      	ldr	r0, [pc, #184]	; (800129c <update7seg+0x124>)
 80011e4:	f000 fe55 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ee:	482b      	ldr	r0, [pc, #172]	; (800129c <update7seg+0x124>)
 80011f0:	f000 fe4f 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fa:	4828      	ldr	r0, [pc, #160]	; (800129c <update7seg+0x124>)
 80011fc:	f000 fe49 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001206:	4825      	ldr	r0, [pc, #148]	; (800129c <update7seg+0x124>)
 8001208:	f000 fe43 	bl	8001e92 <HAL_GPIO_WritePin>
		display7seg(led_buffer[1]);
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <update7seg+0x128>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fe23 	bl	8000e5c <display7seg>
		break;
 8001216:	e03c      	b.n	8001292 <update7seg+0x11a>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800121e:	481f      	ldr	r0, [pc, #124]	; (800129c <update7seg+0x124>)
 8001220:	f000 fe37 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122a:	481c      	ldr	r0, [pc, #112]	; (800129c <update7seg+0x124>)
 800122c:	f000 fe31 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001236:	4819      	ldr	r0, [pc, #100]	; (800129c <update7seg+0x124>)
 8001238:	f000 fe2b 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001242:	4816      	ldr	r0, [pc, #88]	; (800129c <update7seg+0x124>)
 8001244:	f000 fe25 	bl	8001e92 <HAL_GPIO_WritePin>
		display7seg(led_buffer[2]);
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <update7seg+0x128>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe05 	bl	8000e5c <display7seg>
		break;
 8001252:	e01e      	b.n	8001292 <update7seg+0x11a>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800125a:	4810      	ldr	r0, [pc, #64]	; (800129c <update7seg+0x124>)
 800125c:	f000 fe19 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <update7seg+0x124>)
 8001268:	f000 fe13 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001272:	480a      	ldr	r0, [pc, #40]	; (800129c <update7seg+0x124>)
 8001274:	f000 fe0d 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <update7seg+0x124>)
 8001280:	f000 fe07 	bl	8001e92 <HAL_GPIO_WritePin>
		display7seg(led_buffer[3]);
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <update7seg+0x128>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fde7 	bl	8000e5c <display7seg>
		break;
 800128e:	e000      	b.n	8001292 <update7seg+0x11a>
	default:
		break;
 8001290:	bf00      	nop
	}
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40010800 	.word	0x40010800
 80012a0:	20000074 	.word	0x20000074

080012a4 <updateClockBuffer>:

void updateClockBuffer(){
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	led_buffer[0] = x_axis_time / 10;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <updateClockBuffer+0x70>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <updateClockBuffer+0x74>)
 80012ae:	fb82 1203 	smull	r1, r2, r2, r3
 80012b2:	1092      	asrs	r2, r2, #2
 80012b4:	17db      	asrs	r3, r3, #31
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	4a18      	ldr	r2, [pc, #96]	; (800131c <updateClockBuffer+0x78>)
 80012ba:	6013      	str	r3, [r2, #0]
	led_buffer[1] = x_axis_time % 10;
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <updateClockBuffer+0x70>)
 80012be:	6819      	ldr	r1, [r3, #0]
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <updateClockBuffer+0x74>)
 80012c2:	fb83 2301 	smull	r2, r3, r3, r1
 80012c6:	109a      	asrs	r2, r3, #2
 80012c8:	17cb      	asrs	r3, r1, #31
 80012ca:	1ad2      	subs	r2, r2, r3
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	1aca      	subs	r2, r1, r3
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <updateClockBuffer+0x78>)
 80012d8:	605a      	str	r2, [r3, #4]
	led_buffer[2] = y_axis_time / 10;
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <updateClockBuffer+0x7c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <updateClockBuffer+0x74>)
 80012e0:	fb82 1203 	smull	r1, r2, r2, r3
 80012e4:	1092      	asrs	r2, r2, #2
 80012e6:	17db      	asrs	r3, r3, #31
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	4a0c      	ldr	r2, [pc, #48]	; (800131c <updateClockBuffer+0x78>)
 80012ec:	6093      	str	r3, [r2, #8]
	led_buffer[3] = y_axis_time % 10;
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <updateClockBuffer+0x7c>)
 80012f0:	6819      	ldr	r1, [r3, #0]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <updateClockBuffer+0x74>)
 80012f4:	fb83 2301 	smull	r2, r3, r3, r1
 80012f8:	109a      	asrs	r2, r3, #2
 80012fa:	17cb      	asrs	r3, r1, #31
 80012fc:	1ad2      	subs	r2, r2, r3
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	1aca      	subs	r2, r1, r3
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <updateClockBuffer+0x78>)
 800130a:	60da      	str	r2, [r3, #12]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	200003f0 	.word	0x200003f0
 8001318:	66666667 	.word	0x66666667
 800131c:	20000074 	.word	0x20000074
 8001320:	200003f4 	.word	0x200003f4

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f000 fab2 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132c:	f000 f832 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8001330:	f000 f86c 	bl	800140c <MX_TIM2_Init>
  MX_GPIO_Init();
 8001334:	f000 f8b6 	bl	80014a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001338:	4810      	ldr	r0, [pc, #64]	; (800137c <main+0x58>)
 800133a:	f001 fa07 	bl	800274c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Init();
 800133e:	f7fe ff05 	bl	800014c <SCH_Init>

  SCH_Add_Task(timerRun, 1, 10);
 8001342:	220a      	movs	r2, #10
 8001344:	2101      	movs	r1, #1
 8001346:	480e      	ldr	r0, [pc, #56]	; (8001380 <main+0x5c>)
 8001348:	f7fe ffa0 	bl	800028c <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 1, 10);
 800134c:	220a      	movs	r2, #10
 800134e:	2101      	movs	r1, #1
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <main+0x60>)
 8001352:	f7fe ff9b 	bl	800028c <SCH_Add_Task>
  SCH_Add_Task(Toggle, 1, 1000);
 8001356:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800135a:	2101      	movs	r1, #1
 800135c:	480a      	ldr	r0, [pc, #40]	; (8001388 <main+0x64>)
 800135e:	f7fe ff95 	bl	800028c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 1, 100);
 8001362:	2264      	movs	r2, #100	; 0x64
 8001364:	2101      	movs	r1, #1
 8001366:	4809      	ldr	r0, [pc, #36]	; (800138c <main+0x68>)
 8001368:	f7fe ff90 	bl	800028c <SCH_Add_Task>
  SCH_Add_Task(fsm_manual, 1, 100);
 800136c:	2264      	movs	r2, #100	; 0x64
 800136e:	2101      	movs	r1, #1
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <main+0x6c>)
 8001372:	f7fe ff8b 	bl	800028c <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8001376:	f7ff f885 	bl	8000484 <SCH_Dispatch_Tasks>
 800137a:	e7fc      	b.n	8001376 <main+0x52>
 800137c:	200003f8 	.word	0x200003f8
 8001380:	080015c1 	.word	0x080015c1
 8001384:	08000585 	.word	0x08000585
 8001388:	0800173d 	.word	0x0800173d
 800138c:	080006b9 	.word	0x080006b9
 8001390:	08000b05 	.word	0x08000b05

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b090      	sub	sp, #64	; 0x40
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0318 	add.w	r3, r7, #24
 800139e:	2228      	movs	r2, #40	; 0x28
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fd82 	bl	8002eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ba:	2301      	movs	r3, #1
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013be:	2310      	movs	r3, #16
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fd92 	bl	8001ef4 <HAL_RCC_OscConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013d6:	f000 f8cf 	bl	8001578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013da:	230f      	movs	r3, #15
 80013dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fffe 	bl	80023f4 <HAL_RCC_ClockConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013fe:	f000 f8bb 	bl	8001578 <Error_Handler>
  }
}
 8001402:	bf00      	nop
 8001404:	3740      	adds	r7, #64	; 0x40
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_TIM2_Init+0x94>)
 800142a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800142e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_TIM2_Init+0x94>)
 8001432:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001436:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_TIM2_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_TIM2_Init+0x94>)
 8001440:	2209      	movs	r2, #9
 8001442:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_TIM2_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_TIM2_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <MX_TIM2_Init+0x94>)
 8001452:	f001 f92b 	bl	80026ac <HAL_TIM_Base_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800145c:	f000 f88c 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <MX_TIM2_Init+0x94>)
 800146e:	f001 faa9 	bl	80029c4 <HAL_TIM_ConfigClockSource>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001478:	f000 f87e 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_TIM2_Init+0x94>)
 800148a:	f001 fc81 	bl	8002d90 <HAL_TIMEx_MasterConfigSynchronization>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001494:	f000 f870 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200003f8 	.word	0x200003f8

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <MX_GPIO_Init+0xb4>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a26      	ldr	r2, [pc, #152]	; (8001558 <MX_GPIO_Init+0xb4>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <MX_GPIO_Init+0xb4>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <MX_GPIO_Init+0xb4>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a20      	ldr	r2, [pc, #128]	; (8001558 <MX_GPIO_Init+0xb4>)
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_GPIO_Init+0xb4>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_0_Pin|YELLOW_0_Pin|GREEN_0_Pin|RED_1_Pin
 80014e8:	2200      	movs	r2, #0
 80014ea:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 80014ee:	481b      	ldr	r0, [pc, #108]	; (800155c <MX_GPIO_Init+0xb8>)
 80014f0:	f000 fccf 	bl	8001e92 <HAL_GPIO_WritePin>
                          |YELLOW_1_Pin|GREEN_1_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 80014f4:	2200      	movs	r2, #0
 80014f6:	21ff      	movs	r1, #255	; 0xff
 80014f8:	4819      	ldr	r0, [pc, #100]	; (8001560 <MX_GPIO_Init+0xbc>)
 80014fa:	f000 fcca 	bl	8001e92 <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 80014fe:	230e      	movs	r3, #14
 8001500:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001506:	2301      	movs	r3, #1
 8001508:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4619      	mov	r1, r3
 8001510:	4812      	ldr	r0, [pc, #72]	; (800155c <MX_GPIO_Init+0xb8>)
 8001512:	f000 fb2d 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_0_Pin YELLOW_0_Pin GREEN_0_Pin RED_1_Pin
                           YELLOW_1_Pin GREEN_1_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_0_Pin|YELLOW_0_Pin|GREEN_0_Pin|RED_1_Pin
 8001516:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 800151a:	60bb      	str	r3, [r7, #8]
                          |YELLOW_1_Pin|GREEN_1_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2302      	movs	r3, #2
 8001526:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	4619      	mov	r1, r3
 800152e:	480b      	ldr	r0, [pc, #44]	; (800155c <MX_GPIO_Init+0xb8>)
 8001530:	f000 fb1e 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin LED_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8001534:	23ff      	movs	r3, #255	; 0xff
 8001536:	60bb      	str	r3, [r7, #8]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2302      	movs	r3, #2
 8001542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	4619      	mov	r1, r3
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_GPIO_Init+0xbc>)
 800154c:	f000 fb10 	bl	8001b70 <HAL_GPIO_Init>

}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000
 800155c:	40010800 	.word	0x40010800
 8001560:	40010c00 	.word	0x40010c00

08001564 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim ){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800156c:	f7fe fe34 	bl	80001d8 <SCH_Update>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	e7fe      	b.n	8001580 <Error_Handler+0x8>
	...

08001584 <setTimer>:

int timer_flag[10];
int timer_count[10];
int timer_cycle = 10;

void setTimer(int index, int counter){
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800158e:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <setTimer+0x30>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2100      	movs	r1, #0
 8001594:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_count[index] = counter / timer_cycle;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <setTimer+0x34>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	fb92 f2f3 	sdiv	r2, r2, r3
 80015a2:	4906      	ldr	r1, [pc, #24]	; (80015bc <setTimer+0x38>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000440 	.word	0x20000440
 80015b8:	20000084 	.word	0x20000084
 80015bc:	20000468 	.word	0x20000468

080015c0 <timerRun>:

void timerRun(){
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
	for(int i=0; i < 10; i++){
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	e01c      	b.n	8001606 <timerRun+0x46>
		if(timer_count[i] > 0){
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <timerRun+0x58>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	dd13      	ble.n	8001600 <timerRun+0x40>
			timer_count[i]--;
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <timerRun+0x58>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	490d      	ldr	r1, [pc, #52]	; (8001618 <timerRun+0x58>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_count[i] <= 0){
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <timerRun+0x58>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	dc04      	bgt.n	8001600 <timerRun+0x40>
				timer_flag[i] = 1;
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <timerRun+0x5c>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2101      	movs	r1, #1
 80015fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i < 10; i++){
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3301      	adds	r3, #1
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b09      	cmp	r3, #9
 800160a:	dddf      	ble.n	80015cc <timerRun+0xc>
			}
		}
	}
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000468 	.word	0x20000468
 800161c:	20000440 	.word	0x20000440

08001620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_MspInit+0x5c>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <HAL_MspInit+0x5c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6193      	str	r3, [r2, #24]
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_MspInit+0x5c>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_MspInit+0x5c>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <HAL_MspInit+0x5c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_MspInit+0x5c>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_MspInit+0x60>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_MspInit+0x60>)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000

08001684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001694:	d113      	bne.n	80016be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_TIM_Base_MspInit+0x44>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_TIM_Base_MspInit+0x44>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_TIM_Base_MspInit+0x44>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	201c      	movs	r0, #28
 80016b4:	f000 fa25 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016b8:	201c      	movs	r0, #28
 80016ba:	f000 fa3e 	bl	8001b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <NMI_Handler+0x4>

080016d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <MemManage_Handler+0x4>

080016de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001712:	f000 f903 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <TIM2_IRQHandler+0x10>)
 8001722:	f001 f85f 	bl	80027e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200003f8 	.word	0x200003f8

08001730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <Toggle>:
 *      Author: Welcome
 */

#include "test.h"

 void Toggle(){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	if(timer_flag[8] == 0){
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <Toggle+0x24>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d108      	bne.n	800175a <Toggle+0x1e>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <Toggle+0x28>)
 800174c:	f000 fbb9 	bl	8001ec2 <HAL_GPIO_TogglePin>
		  setTimer(8, 1000);
 8001750:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001754:	2008      	movs	r0, #8
 8001756:	f7ff ff15 	bl	8001584 <setTimer>
	  }
  }
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000440 	.word	0x20000440
 8001764:	40010c00 	.word	0x40010c00

08001768 <setTraffic>:
 */


#include "traffic_light.h"

void setTraffic(int x_axis, int y_axis){
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	x_axis_time = x_axis;
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <setTraffic+0x20>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6013      	str	r3, [r2, #0]
	y_axis_time = y_axis;
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <setTraffic+0x24>)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	6013      	str	r3, [r2, #0]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	200003f0 	.word	0x200003f0
 800178c:	200003f4 	.word	0x200003f4

08001790 <set_X_axis_light>:

void set_X_axis_light(int red, int green, int yellow){
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(RED_0_GPIO_Port, RED_0_Pin, red);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	2110      	movs	r1, #16
 80017a4:	480a      	ldr	r0, [pc, #40]	; (80017d0 <set_X_axis_light+0x40>)
 80017a6:	f000 fb74 	bl	8001e92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_0_GPIO_Port, GREEN_0_Pin, green);
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	2140      	movs	r1, #64	; 0x40
 80017b2:	4807      	ldr	r0, [pc, #28]	; (80017d0 <set_X_axis_light+0x40>)
 80017b4:	f000 fb6d 	bl	8001e92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_0_GPIO_Port, YELLOW_0_Pin, yellow);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	2120      	movs	r1, #32
 80017c0:	4803      	ldr	r0, [pc, #12]	; (80017d0 <set_X_axis_light+0x40>)
 80017c2:	f000 fb66 	bl	8001e92 <HAL_GPIO_WritePin>
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010800 	.word	0x40010800

080017d4 <set_Y_axis_light>:
void set_Y_axis_light(int red, int green, int yellow){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, red);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	480b      	ldr	r0, [pc, #44]	; (8001818 <set_Y_axis_light+0x44>)
 80017ea:	f000 fb52 	bl	8001e92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, green);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f8:	4807      	ldr	r0, [pc, #28]	; (8001818 <set_Y_axis_light+0x44>)
 80017fa:	f000 fb4a 	bl	8001e92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, yellow);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001808:	4803      	ldr	r0, [pc, #12]	; (8001818 <set_Y_axis_light+0x44>)
 800180a:	f000 fb42 	bl	8001e92 <HAL_GPIO_WritePin>
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40010800 	.word	0x40010800

0800181c <countDown>:

void countDown(){
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
	x_axis_time--;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <countDown+0x20>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3b01      	subs	r3, #1
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <countDown+0x20>)
 8001828:	6013      	str	r3, [r2, #0]
	y_axis_time--;
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <countDown+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3b01      	subs	r3, #1
 8001830:	4a03      	ldr	r2, [pc, #12]	; (8001840 <countDown+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	200003f0 	.word	0x200003f0
 8001840:	200003f4 	.word	0x200003f4

08001844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001844:	f7ff ff74 	bl	8001730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001848:	480b      	ldr	r0, [pc, #44]	; (8001878 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800184a:	490c      	ldr	r1, [pc, #48]	; (800187c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800184c:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <LoopFillZerobss+0x16>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001860:	4c09      	ldr	r4, [pc, #36]	; (8001888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186e:	f001 faf9 	bl	8002e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001872:	f7ff fd57 	bl	8001324 <main>
  bx lr
 8001876:	4770      	bx	lr
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001880:	08002f00 	.word	0x08002f00
  ldr r2, =_sbss
 8001884:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001888:	20000494 	.word	0x20000494

0800188c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_2_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x28>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x28>)
 800189a:	f043 0310 	orr.w	r3, r3, #16
 800189e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 f923 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff feb8 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40022000 	.word	0x40022000

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f93b 	bl	8001b56 <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f000 f903 	bl	8001b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	; (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000088 	.word	0x20000088
 8001914:	20000090 	.word	0x20000090
 8001918:	2000008c 	.word	0x2000008c

0800191c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_IncTick+0x1c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_IncTick+0x20>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a03      	ldr	r2, [pc, #12]	; (800193c <HAL_IncTick+0x20>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	20000090 	.word	0x20000090
 800193c:	20000490 	.word	0x20000490

08001940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <HAL_GetTick+0x10>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	20000490 	.word	0x20000490

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4906      	ldr	r1, [pc, #24]	; (80019ec <__NVIC_EnableIRQ+0x34>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff90 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff2d 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff42 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff90 	bl	8001a44 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5f 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff35 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa2 	bl	8001aa8 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b08b      	sub	sp, #44	; 0x2c
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	e148      	b.n	8001e16 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b84:	2201      	movs	r2, #1
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f040 8137 	bne.w	8001e10 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4aa3      	ldr	r2, [pc, #652]	; (8001e34 <HAL_GPIO_Init+0x2c4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d05e      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bac:	4aa1      	ldr	r2, [pc, #644]	; (8001e34 <HAL_GPIO_Init+0x2c4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d875      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bb2:	4aa1      	ldr	r2, [pc, #644]	; (8001e38 <HAL_GPIO_Init+0x2c8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d058      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bb8:	4a9f      	ldr	r2, [pc, #636]	; (8001e38 <HAL_GPIO_Init+0x2c8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d86f      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bbe:	4a9f      	ldr	r2, [pc, #636]	; (8001e3c <HAL_GPIO_Init+0x2cc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d052      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bc4:	4a9d      	ldr	r2, [pc, #628]	; (8001e3c <HAL_GPIO_Init+0x2cc>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d869      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bca:	4a9d      	ldr	r2, [pc, #628]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d04c      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bd0:	4a9b      	ldr	r2, [pc, #620]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d863      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bd6:	4a9b      	ldr	r2, [pc, #620]	; (8001e44 <HAL_GPIO_Init+0x2d4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d046      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bdc:	4a99      	ldr	r2, [pc, #612]	; (8001e44 <HAL_GPIO_Init+0x2d4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d85d      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001be2:	2b12      	cmp	r3, #18
 8001be4:	d82a      	bhi.n	8001c3c <HAL_GPIO_Init+0xcc>
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d859      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bea:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <HAL_GPIO_Init+0x80>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c6b 	.word	0x08001c6b
 8001bf4:	08001c45 	.word	0x08001c45
 8001bf8:	08001c57 	.word	0x08001c57
 8001bfc:	08001c99 	.word	0x08001c99
 8001c00:	08001c9f 	.word	0x08001c9f
 8001c04:	08001c9f 	.word	0x08001c9f
 8001c08:	08001c9f 	.word	0x08001c9f
 8001c0c:	08001c9f 	.word	0x08001c9f
 8001c10:	08001c9f 	.word	0x08001c9f
 8001c14:	08001c9f 	.word	0x08001c9f
 8001c18:	08001c9f 	.word	0x08001c9f
 8001c1c:	08001c9f 	.word	0x08001c9f
 8001c20:	08001c9f 	.word	0x08001c9f
 8001c24:	08001c9f 	.word	0x08001c9f
 8001c28:	08001c9f 	.word	0x08001c9f
 8001c2c:	08001c9f 	.word	0x08001c9f
 8001c30:	08001c9f 	.word	0x08001c9f
 8001c34:	08001c4d 	.word	0x08001c4d
 8001c38:	08001c61 	.word	0x08001c61
 8001c3c:	4a82      	ldr	r2, [pc, #520]	; (8001e48 <HAL_GPIO_Init+0x2d8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c42:	e02c      	b.n	8001c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	623b      	str	r3, [r7, #32]
          break;
 8001c4a:	e029      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	3304      	adds	r3, #4
 8001c52:	623b      	str	r3, [r7, #32]
          break;
 8001c54:	e024      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	3308      	adds	r3, #8
 8001c5c:	623b      	str	r3, [r7, #32]
          break;
 8001c5e:	e01f      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	330c      	adds	r3, #12
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	e01a      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c72:	2304      	movs	r3, #4
 8001c74:	623b      	str	r3, [r7, #32]
          break;
 8001c76:	e013      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c80:	2308      	movs	r3, #8
 8001c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	611a      	str	r2, [r3, #16]
          break;
 8001c8a:	e009      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	615a      	str	r2, [r3, #20]
          break;
 8001c96:	e003      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          break;
 8001c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d801      	bhi.n	8001caa <HAL_GPIO_Init+0x13a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	e001      	b.n	8001cae <HAL_GPIO_Init+0x13e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3304      	adds	r3, #4
 8001cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2bff      	cmp	r3, #255	; 0xff
 8001cb4:	d802      	bhi.n	8001cbc <HAL_GPIO_Init+0x14c>
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0x152>
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	3b08      	subs	r3, #8
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	210f      	movs	r1, #15
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	6a39      	ldr	r1, [r7, #32]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8090 	beq.w	8001e10 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf0:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a55      	ldr	r2, [pc, #340]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d08:	4a51      	ldr	r2, [pc, #324]	; (8001e50 <HAL_GPIO_Init+0x2e0>)
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a49      	ldr	r2, [pc, #292]	; (8001e54 <HAL_GPIO_Init+0x2e4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00d      	beq.n	8001d50 <HAL_GPIO_Init+0x1e0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a48      	ldr	r2, [pc, #288]	; (8001e58 <HAL_GPIO_Init+0x2e8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d007      	beq.n	8001d4c <HAL_GPIO_Init+0x1dc>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a47      	ldr	r2, [pc, #284]	; (8001e5c <HAL_GPIO_Init+0x2ec>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d101      	bne.n	8001d48 <HAL_GPIO_Init+0x1d8>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e004      	b.n	8001d52 <HAL_GPIO_Init+0x1e2>
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e002      	b.n	8001d52 <HAL_GPIO_Init+0x1e2>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_GPIO_Init+0x1e2>
 8001d50:	2300      	movs	r3, #0
 8001d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d54:	f002 0203 	and.w	r2, r2, #3
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	4093      	lsls	r3, r2
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d62:	493b      	ldr	r1, [pc, #236]	; (8001e50 <HAL_GPIO_Init+0x2e0>)
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d7c:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4937      	ldr	r1, [pc, #220]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	608b      	str	r3, [r1, #8]
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d8a:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4933      	ldr	r1, [pc, #204]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001da4:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	492d      	ldr	r1, [pc, #180]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001db2:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4929      	ldr	r1, [pc, #164]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4923      	ldr	r1, [pc, #140]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	491f      	ldr	r1, [pc, #124]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4919      	ldr	r1, [pc, #100]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4915      	ldr	r1, [pc, #84]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3301      	adds	r3, #1
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f47f aeaf 	bne.w	8001b84 <HAL_GPIO_Init+0x14>
  }
}
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	372c      	adds	r7, #44	; 0x2c
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	10320000 	.word	0x10320000
 8001e38:	10310000 	.word	0x10310000
 8001e3c:	10220000 	.word	0x10220000
 8001e40:	10210000 	.word	0x10210000
 8001e44:	10120000 	.word	0x10120000
 8001e48:	10110000 	.word	0x10110000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40010800 	.word	0x40010800
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e001      	b.n	8001e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	807b      	strh	r3, [r7, #2]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea2:	787b      	ldrb	r3, [r7, #1]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea8:	887a      	ldrh	r2, [r7, #2]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eae:	e003      	b.n	8001eb8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	041a      	lsls	r2, r3, #16
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	611a      	str	r2, [r3, #16]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ed4:	887a      	ldrh	r2, [r7, #2]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	041a      	lsls	r2, r3, #16
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	400b      	ands	r3, r1
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	611a      	str	r2, [r3, #16]
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e26c      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8087 	beq.w	8002022 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f14:	4b92      	ldr	r3, [pc, #584]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d00c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f20:	4b8f      	ldr	r3, [pc, #572]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d112      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5e>
 8001f2c:	4b8c      	ldr	r3, [pc, #560]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d10b      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3a:	4b89      	ldr	r3, [pc, #548]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d06c      	beq.n	8002020 <HAL_RCC_OscConfig+0x12c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d168      	bne.n	8002020 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e246      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x76>
 8001f5c:	4b80      	ldr	r3, [pc, #512]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a7f      	ldr	r2, [pc, #508]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e02e      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x98>
 8001f72:	4b7b      	ldr	r3, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7a      	ldr	r2, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b78      	ldr	r3, [pc, #480]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a77      	ldr	r2, [pc, #476]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e01d      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xbc>
 8001f96:	4b72      	ldr	r3, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a71      	ldr	r2, [pc, #452]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a6e      	ldr	r2, [pc, #440]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001fb0:	4b6b      	ldr	r3, [pc, #428]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a6a      	ldr	r2, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b68      	ldr	r3, [pc, #416]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a67      	ldr	r2, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fcb6 	bl	8001940 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff fcb2 	bl	8001940 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e1fa      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b5d      	ldr	r3, [pc, #372]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xe4>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fca2 	bl	8001940 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff fc9e 	bl	8001940 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e1e6      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x10c>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d063      	beq.n	80020f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202e:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800203a:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d11c      	bne.n	8002080 <HAL_RCC_OscConfig+0x18c>
 8002046:	4b46      	ldr	r3, [pc, #280]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x176>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e1ba      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4939      	ldr	r1, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	e03a      	b.n	80020f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <HAL_RCC_OscConfig+0x270>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff fc57 	bl	8001940 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff fc53 	bl	8001940 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e19b      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4927      	ldr	r1, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_RCC_OscConfig+0x270>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fc36 	bl	8001940 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d8:	f7ff fc32 	bl	8001940 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e17a      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d03a      	beq.n	8002178 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d019      	beq.n	800213e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_RCC_OscConfig+0x274>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7ff fc16 	bl	8001940 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002118:	f7ff fc12 	bl	8001940 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e15a      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002136:	2001      	movs	r0, #1
 8002138:	f000 fa9a 	bl	8002670 <RCC_Delay>
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_RCC_OscConfig+0x274>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002144:	f7ff fbfc 	bl	8001940 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214a:	e00f      	b.n	800216c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214c:	f7ff fbf8 	bl	8001940 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d908      	bls.n	800216c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e140      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	42420000 	.word	0x42420000
 8002168:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	4b9e      	ldr	r3, [pc, #632]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e9      	bne.n	800214c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80a6 	beq.w	80022d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b97      	ldr	r3, [pc, #604]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b94      	ldr	r3, [pc, #592]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a93      	ldr	r2, [pc, #588]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b91      	ldr	r3, [pc, #580]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	4b8e      	ldr	r3, [pc, #568]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021be:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a8a      	ldr	r2, [pc, #552]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7ff fbb9 	bl	8001940 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7ff fbb5 	bl	8001940 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	; 0x64
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0fd      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	4b81      	ldr	r3, [pc, #516]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x312>
 80021f8:	4b7b      	ldr	r3, [pc, #492]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a7a      	ldr	r2, [pc, #488]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e02d      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x334>
 800220e:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a75      	ldr	r2, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	4b73      	ldr	r3, [pc, #460]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a72      	ldr	r2, [pc, #456]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	e01c      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d10c      	bne.n	800224a <HAL_RCC_OscConfig+0x356>
 8002230:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a6c      	ldr	r2, [pc, #432]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4a69      	ldr	r2, [pc, #420]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6213      	str	r3, [r2, #32]
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 800224a:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a66      	ldr	r2, [pc, #408]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	4b64      	ldr	r3, [pc, #400]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a63      	ldr	r2, [pc, #396]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7ff fb69 	bl	8001940 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7ff fb65 	bl	8001940 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0ab      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b57      	ldr	r3, [pc, #348]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCC_OscConfig+0x37e>
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7ff fb53 	bl	8001940 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7ff fb4f 	bl	8001940 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e095      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8081 	beq.w	80023de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d061      	beq.n	80023ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d146      	bne.n	800237e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff fb23 	bl	8001940 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7ff fb1f 	bl	8001940 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e067      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002324:	d108      	bne.n	8002338 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002326:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	492d      	ldr	r1, [pc, #180]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002338:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a19      	ldr	r1, [r3, #32]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	430b      	orrs	r3, r1
 800234a:	4927      	ldr	r1, [pc, #156]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff faf3 	bl	8001940 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7ff faef 	bl	8001940 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e037      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x46a>
 800237c:	e02f      	b.n	80023de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff fadc 	bl	8001940 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7ff fad8 	bl	8001940 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e020      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x498>
 80023aa:	e018      	b.n	80023de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e013      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
 80023f0:	42420060 	.word	0x42420060

080023f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0d0      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002408:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d910      	bls.n	8002438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0207 	bic.w	r2, r3, #7
 800241e:	4965      	ldr	r1, [pc, #404]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0b8      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800245a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002468:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a52      	ldr	r2, [pc, #328]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002472:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	494d      	ldr	r1, [pc, #308]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d040      	beq.n	8002514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d115      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e07f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e073      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c2:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e06b      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d2:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f023 0203 	bic.w	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4936      	ldr	r1, [pc, #216]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e4:	f7ff fa2c 	bl	8001940 <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ec:	f7ff fa28 	bl	8001940 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e053      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 020c 	and.w	r2, r3, #12
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	429a      	cmp	r2, r3
 8002512:	d1eb      	bne.n	80024ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d210      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 0207 	bic.w	r2, r3, #7
 800252a:	4922      	ldr	r1, [pc, #136]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e032      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4916      	ldr	r1, [pc, #88]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	490e      	ldr	r1, [pc, #56]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002582:	f000 f821 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8002586:	4602      	mov	r2, r0
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	490a      	ldr	r1, [pc, #40]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	5ccb      	ldrb	r3, [r1, r3]
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x1cc>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1d0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f98a 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40021000 	.word	0x40021000
 80025bc:	08002ed4 	.word	0x08002ed4
 80025c0:	20000088 	.word	0x20000088
 80025c4:	2000008c 	.word	0x2000008c

080025c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <HAL_RCC_GetSysClockFreq+0x94>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d002      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x30>
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_GetSysClockFreq+0x36>
 80025f6:	e027      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_RCC_GetSysClockFreq+0x98>)
 80025fa:	613b      	str	r3, [r7, #16]
      break;
 80025fc:	e027      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	0c9b      	lsrs	r3, r3, #18
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002608:	5cd3      	ldrb	r3, [r2, r3]
 800260a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d010      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_RCC_GetSysClockFreq+0x94>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	0c5b      	lsrs	r3, r3, #17
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	4a11      	ldr	r2, [pc, #68]	; (8002668 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002622:	5cd3      	ldrb	r3, [r2, r3]
 8002624:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <HAL_RCC_GetSysClockFreq+0x98>)
 800262a:	fb02 f203 	mul.w	r2, r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	fbb2 f3f3 	udiv	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	e004      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a0c      	ldr	r2, [pc, #48]	; (800266c <HAL_RCC_GetSysClockFreq+0xa4>)
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	613b      	str	r3, [r7, #16]
      break;
 8002646:	e002      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetSysClockFreq+0x98>)
 800264a:	613b      	str	r3, [r7, #16]
      break;
 800264c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264e:	693b      	ldr	r3, [r7, #16]
}
 8002650:	4618      	mov	r0, r3
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	007a1200 	.word	0x007a1200
 8002664:	08002ee4 	.word	0x08002ee4
 8002668:	08002ef4 	.word	0x08002ef4
 800266c:	003d0900 	.word	0x003d0900

08002670 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002678:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <RCC_Delay+0x34>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <RCC_Delay+0x38>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0a5b      	lsrs	r3, r3, #9
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800268c:	bf00      	nop
  }
  while (Delay --);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1e5a      	subs	r2, r3, #1
 8002692:	60fa      	str	r2, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f9      	bne.n	800268c <RCC_Delay+0x1c>
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000088 	.word	0x20000088
 80026a8:	10624dd3 	.word	0x10624dd3

080026ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e041      	b.n	8002742 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe ffd6 	bl	8001684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3304      	adds	r3, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	4610      	mov	r0, r2
 80026ec:	f000 fa56 	bl	8002b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d001      	beq.n	8002764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e035      	b.n	80027d0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a16      	ldr	r2, [pc, #88]	; (80027dc <HAL_TIM_Base_Start_IT+0x90>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d009      	beq.n	800279a <HAL_TIM_Base_Start_IT+0x4e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278e:	d004      	beq.n	800279a <HAL_TIM_Base_Start_IT+0x4e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <HAL_TIM_Base_Start_IT+0x94>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d111      	bne.n	80027be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b06      	cmp	r3, #6
 80027aa:	d010      	beq.n	80027ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027bc:	e007      	b.n	80027ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0201 	orr.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	40000400 	.word	0x40000400

080027e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d020      	beq.n	8002848 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0202 	mvn.w	r2, #2
 8002818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f998 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002834:	e005      	b.n	8002842 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f98b 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f99a 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d020      	beq.n	8002894 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0204 	mvn.w	r2, #4
 8002864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f972 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f965 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f974 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d020      	beq.n	80028e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01b      	beq.n	80028e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0208 	mvn.w	r2, #8
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2204      	movs	r2, #4
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f94c 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f93f 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f94e 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d020      	beq.n	800292c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01b      	beq.n	800292c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0210 	mvn.w	r2, #16
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2208      	movs	r2, #8
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f926 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f919 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f928 	bl	8002b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00c      	beq.n	8002950 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0201 	mvn.w	r2, #1
 8002948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe fe0a 	bl	8001564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00c      	beq.n	8002974 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fa6f 	bl	8002e52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00c      	beq.n	8002998 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8f8 	bl	8002b88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00c      	beq.n	80029bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0220 	mvn.w	r2, #32
 80029b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fa42 	bl	8002e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_TIM_ConfigClockSource+0x1c>
 80029dc:	2302      	movs	r3, #2
 80029de:	e0b4      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x186>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a18:	d03e      	beq.n	8002a98 <HAL_TIM_ConfigClockSource+0xd4>
 8002a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a1e:	f200 8087 	bhi.w	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a26:	f000 8086 	beq.w	8002b36 <HAL_TIM_ConfigClockSource+0x172>
 8002a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2e:	d87f      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a30:	2b70      	cmp	r3, #112	; 0x70
 8002a32:	d01a      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0xa6>
 8002a34:	2b70      	cmp	r3, #112	; 0x70
 8002a36:	d87b      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a38:	2b60      	cmp	r3, #96	; 0x60
 8002a3a:	d050      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x11a>
 8002a3c:	2b60      	cmp	r3, #96	; 0x60
 8002a3e:	d877      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a40:	2b50      	cmp	r3, #80	; 0x50
 8002a42:	d03c      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0xfa>
 8002a44:	2b50      	cmp	r3, #80	; 0x50
 8002a46:	d873      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a48:	2b40      	cmp	r3, #64	; 0x40
 8002a4a:	d058      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x13a>
 8002a4c:	2b40      	cmp	r3, #64	; 0x40
 8002a4e:	d86f      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a50:	2b30      	cmp	r3, #48	; 0x30
 8002a52:	d064      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x15a>
 8002a54:	2b30      	cmp	r3, #48	; 0x30
 8002a56:	d86b      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d060      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x15a>
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d867      	bhi.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d05c      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x15a>
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d05a      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x15a>
 8002a68:	e062      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6899      	ldr	r1, [r3, #8]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f000 f96a 	bl	8002d52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	609a      	str	r2, [r3, #8]
      break;
 8002a96:	e04f      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6899      	ldr	r1, [r3, #8]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f000 f953 	bl	8002d52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aba:	609a      	str	r2, [r3, #8]
      break;
 8002abc:	e03c      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	461a      	mov	r2, r3
 8002acc:	f000 f8ca 	bl	8002c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2150      	movs	r1, #80	; 0x50
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f921 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002adc:	e02c      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f000 f8e8 	bl	8002cc0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2160      	movs	r1, #96	; 0x60
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f911 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002afc:	e01c      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f000 f8aa 	bl	8002c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2140      	movs	r1, #64	; 0x40
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f901 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002b1c:	e00c      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4619      	mov	r1, r3
 8002b28:	4610      	mov	r0, r2
 8002b2a:	f000 f8f8 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002b2e:	e003      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
      break;
 8002b34:	e000      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
	...

08002b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a2b      	ldr	r2, [pc, #172]	; (8002c5c <TIM_Base_SetConfig+0xc0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d007      	beq.n	8002bc4 <TIM_Base_SetConfig+0x28>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bba:	d003      	beq.n	8002bc4 <TIM_Base_SetConfig+0x28>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a28      	ldr	r2, [pc, #160]	; (8002c60 <TIM_Base_SetConfig+0xc4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d108      	bne.n	8002bd6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <TIM_Base_SetConfig+0xc0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <TIM_Base_SetConfig+0x52>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d003      	beq.n	8002bee <TIM_Base_SetConfig+0x52>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <TIM_Base_SetConfig+0xc4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d108      	bne.n	8002c00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a0d      	ldr	r2, [pc, #52]	; (8002c5c <TIM_Base_SetConfig+0xc0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d103      	bne.n	8002c34 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f023 0201 	bic.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	611a      	str	r2, [r3, #16]
  }
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40000400 	.word	0x40000400

08002c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f023 0201 	bic.w	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f023 030a 	bic.w	r3, r3, #10
 8002ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f023 0210 	bic.w	r2, r3, #16
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	031b      	lsls	r3, r3, #12
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	621a      	str	r2, [r3, #32]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f043 0307 	orr.w	r3, r3, #7
 8002d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	609a      	str	r2, [r3, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b087      	sub	sp, #28
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	609a      	str	r2, [r3, #8]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e041      	b.n	8002e2c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d009      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d004      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a10      	ldr	r2, [pc, #64]	; (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d10c      	bne.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400

08002e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <__libc_init_array>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	2600      	movs	r6, #0
 8002e68:	4d0c      	ldr	r5, [pc, #48]	; (8002e9c <__libc_init_array+0x38>)
 8002e6a:	4c0d      	ldr	r4, [pc, #52]	; (8002ea0 <__libc_init_array+0x3c>)
 8002e6c:	1b64      	subs	r4, r4, r5
 8002e6e:	10a4      	asrs	r4, r4, #2
 8002e70:	42a6      	cmp	r6, r4
 8002e72:	d109      	bne.n	8002e88 <__libc_init_array+0x24>
 8002e74:	f000 f822 	bl	8002ebc <_init>
 8002e78:	2600      	movs	r6, #0
 8002e7a:	4d0a      	ldr	r5, [pc, #40]	; (8002ea4 <__libc_init_array+0x40>)
 8002e7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ea8 <__libc_init_array+0x44>)
 8002e7e:	1b64      	subs	r4, r4, r5
 8002e80:	10a4      	asrs	r4, r4, #2
 8002e82:	42a6      	cmp	r6, r4
 8002e84:	d105      	bne.n	8002e92 <__libc_init_array+0x2e>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8c:	4798      	blx	r3
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7ee      	b.n	8002e70 <__libc_init_array+0xc>
 8002e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e96:	4798      	blx	r3
 8002e98:	3601      	adds	r6, #1
 8002e9a:	e7f2      	b.n	8002e82 <__libc_init_array+0x1e>
 8002e9c:	08002ef8 	.word	0x08002ef8
 8002ea0:	08002ef8 	.word	0x08002ef8
 8002ea4:	08002ef8 	.word	0x08002ef8
 8002ea8:	08002efc 	.word	0x08002efc

08002eac <memset>:
 8002eac:	4603      	mov	r3, r0
 8002eae:	4402      	add	r2, r0
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d100      	bne.n	8002eb6 <memset+0xa>
 8002eb4:	4770      	bx	lr
 8002eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eba:	e7f9      	b.n	8002eb0 <memset+0x4>

08002ebc <_init>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr

08002ec8 <_fini>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	bf00      	nop
 8002ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ece:	bc08      	pop	{r3}
 8002ed0:	469e      	mov	lr, r3
 8002ed2:	4770      	bx	lr
